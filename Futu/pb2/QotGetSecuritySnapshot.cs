// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Qot_GetSecuritySnapshot.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Qot_GetSecuritySnapshot {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class QotGetSecuritySnapshot {

    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_C2S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.C2S, global::Qot_GetSecuritySnapshot.C2S.Builder> internal__static_Qot_GetSecuritySnapshot_C2S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.EquitySnapshotExData, global::Qot_GetSecuritySnapshot.EquitySnapshotExData.Builder> internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.WarrantSnapshotExData, global::Qot_GetSecuritySnapshot.WarrantSnapshotExData.Builder> internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.OptionSnapshotExData, global::Qot_GetSecuritySnapshot.OptionSnapshotExData.Builder> internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.SnapshotBasicData, global::Qot_GetSecuritySnapshot.SnapshotBasicData.Builder> internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_Snapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.Snapshot, global::Qot_GetSecuritySnapshot.Snapshot.Builder> internal__static_Qot_GetSecuritySnapshot_Snapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_S2C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.S2C, global::Qot_GetSecuritySnapshot.S2C.Builder> internal__static_Qot_GetSecuritySnapshot_S2C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.Request, global::Qot_GetSecuritySnapshot.Request.Builder> internal__static_Qot_GetSecuritySnapshot_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.Response, global::Qot_GetSecuritySnapshot.Response.Builder> internal__static_Qot_GetSecuritySnapshot_Response__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;

    static QotGetSecuritySnapshot() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1Rb3RfR2V0U2VjdXJpdHlTbmFwc2hvdC5wcm90bxIXUW90X0dldFNlY3Vy", 
            "aXR5U25hcHNob3QaDENvbW1vbi5wcm90bxoQUW90X0NvbW1vbi5wcm90byIx", 
            "CgNDMlMSKgoMc2VjdXJpdHlMaXN0GAEgAygLMhQuUW90X0NvbW1vbi5TZWN1", 
            "cml0eSKaAgoURXF1aXR5U25hcHNob3RFeERhdGESFAoMaXNzdWVkU2hhcmVz", 
            "GAEgAigDEhcKD2lzc3VlZE1hcmtldFZhbBgCIAIoARIQCghuZXRBc3NldBgD", 
            "IAIoARIRCgluZXRQcm9maXQYBCACKAESGAoQZWFybmluZ3NQZXJzaGFyZRgF", 
            "IAIoARIZChFvdXRzdGFuZGluZ1NoYXJlcxgGIAIoAxIcChRvdXRzdGFuZGlu", 
            "Z01hcmtldFZhbBgHIAIoARIYChBuZXRBc3NldFBlcnNoYXJlGAggAigBEg4K", 
            "BmV5UmF0ZRgJIAIoARIOCgZwZVJhdGUYCiACKAESDgoGcGJSYXRlGAsgAigB", 
            "EhEKCXBlVFRNUmF0ZRgMIAIoASK7AgoVV2FycmFudFNuYXBzaG90RXhEYXRh", 
            "EhYKDmNvbnZlcnNpb25SYXRlGAEgAigBEhMKC3dhcnJhbnRUeXBlGAIgAigF", 
            "EhMKC3N0cmlrZVByaWNlGAMgAigBEhQKDG1hdHVyaXR5VGltZRgEIAIoCRIU", 
            "CgxlbmRUcmFkZVRpbWUYBSACKAkSIwoFb3duZXIYBiACKAsyFC5Rb3RfQ29t", 
            "bW9uLlNlY3VyaXR5EhUKDXJlY292ZXJ5UHJpY2UYByACKAESFAoMc3RyZWV0", 
            "Vm9sdW1uGAggAigDEhMKC2lzc3VlVm9sdW1uGAkgAigDEhIKCnN0cmVldFJh", 
            "dGUYCiACKAESDQoFZGVsdGEYCyACKAESGQoRaW1wbGllZFZvbGF0aWxpdHkY", 
            "DCACKAESDwoHcHJlbWl1bRgNIAIoASKSAgoUT3B0aW9uU25hcHNob3RFeERh", 
            "dGESDAoEdHlwZRgBIAIoBRIjCgVvd25lchgCIAIoCzIULlFvdF9Db21tb24u", 
            "U2VjdXJpdHkSEgoKc3RyaWtlVGltZRgDIAIoCRITCgtzdHJpa2VQcmljZRgE", 
            "IAIoARIUCgxjb250cmFjdFNpemUYBSACKAUSFAoMb3BlbkludGVyZXN0GAYg", 
            "AigFEhkKEWltcGxpZWRWb2xhdGlsaXR5GAcgAigBEg8KB3ByZW1pdW0YCCAC", 
            "KAESDQoFZGVsdGEYCSACKAESDQoFZ2FtbWEYCiACKAESDAoEdmVnYRgLIAIo", 
            "ARINCgV0aGV0YRgMIAIoARILCgNyaG8YDSACKAEiwgIKEVNuYXBzaG90QmFz", 
            "aWNEYXRhEiYKCHNlY3VyaXR5GAEgAigLMhQuUW90X0NvbW1vbi5TZWN1cml0", 
            "eRIMCgR0eXBlGAIgAigFEhEKCWlzU3VzcGVuZBgDIAIoCBIQCghsaXN0VGlt", 
            "ZRgEIAIoCRIPCgdsb3RTaXplGAUgAigFEhMKC3ByaWNlU3ByZWFkGAYgAigB", 
            "EhIKCnVwZGF0ZVRpbWUYByACKAkSEQoJaGlnaFByaWNlGAggAigBEhEKCW9w", 
            "ZW5QcmljZRgJIAIoARIQCghsb3dQcmljZRgKIAIoARIWCg5sYXN0Q2xvc2VQ", 
            "cmljZRgLIAIoARIQCghjdXJQcmljZRgMIAIoARIOCgZ2b2x1bWUYDSACKAMS", 
            "EAoIdHVybm92ZXIYDiACKAESFAoMdHVybm92ZXJSYXRlGA8gAigBIpYCCghT", 
            "bmFwc2hvdBI5CgViYXNpYxgBIAIoCzIqLlFvdF9HZXRTZWN1cml0eVNuYXBz", 
            "aG90LlNuYXBzaG90QmFzaWNEYXRhEkMKDGVxdWl0eUV4RGF0YRgCIAEoCzIt", 
            "LlFvdF9HZXRTZWN1cml0eVNuYXBzaG90LkVxdWl0eVNuYXBzaG90RXhEYXRh", 
            "EkUKDXdhcnJhbnRFeERhdGEYAyABKAsyLi5Rb3RfR2V0U2VjdXJpdHlTbmFw", 
            "c2hvdC5XYXJyYW50U25hcHNob3RFeERhdGESQwoMb3B0aW9uRXhEYXRhGAQg", 
            "ASgLMi0uUW90X0dldFNlY3VyaXR5U25hcHNob3QuT3B0aW9uU25hcHNob3RF", 
            "eERhdGEiPgoDUzJDEjcKDHNuYXBzaG90TGlzdBgBIAMoCzIhLlFvdF9HZXRT", 
            "ZWN1cml0eVNuYXBzaG90LlNuYXBzaG90IjQKB1JlcXVlc3QSKQoDYzJzGAEg", 
            "AigLMhwuUW90X0dldFNlY3VyaXR5U25hcHNob3QuQzJTIm0KCFJlc3BvbnNl", 
            "EhUKB3JldFR5cGUYASACKAU6BC00MDASDgoGcmV0TXNnGAIgASgJEg8KB2Vy", 
            "ckNvZGUYAyABKAUSKQoDczJjGAQgASgLMhwuUW90X0dldFNlY3VyaXR5U25h", 
          "cHNob3QuUzJD"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Qot_GetSecuritySnapshot_C2S__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Qot_GetSecuritySnapshot_C2S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.C2S, global::Qot_GetSecuritySnapshot.C2S.Builder>(internal__static_Qot_GetSecuritySnapshot_C2S__Descriptor,
                new string[] { "SecurityList", });
        internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.EquitySnapshotExData, global::Qot_GetSecuritySnapshot.EquitySnapshotExData.Builder>(internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__Descriptor,
                new string[] { "IssuedShares", "IssuedMarketVal", "NetAsset", "NetProfit", "EarningsPershare", "OutstandingShares", "OutstandingMarketVal", "NetAssetPershare", "EyRate", "PeRate", "PbRate", "PeTTMRate", });
        internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.WarrantSnapshotExData, global::Qot_GetSecuritySnapshot.WarrantSnapshotExData.Builder>(internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__Descriptor,
                new string[] { "ConversionRate", "WarrantType", "StrikePrice", "MaturityTime", "EndTradeTime", "Owner", "RecoveryPrice", "StreetVolumn", "IssueVolumn", "StreetRate", "Delta", "ImpliedVolatility", "Premium", });
        internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.OptionSnapshotExData, global::Qot_GetSecuritySnapshot.OptionSnapshotExData.Builder>(internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__Descriptor,
                new string[] { "Type", "Owner", "StrikeTime", "StrikePrice", "ContractSize", "OpenInterest", "ImpliedVolatility", "Premium", "Delta", "Gamma", "Vega", "Theta", "Rho", });
        internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.SnapshotBasicData, global::Qot_GetSecuritySnapshot.SnapshotBasicData.Builder>(internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__Descriptor,
                new string[] { "Security", "Type", "IsSuspend", "ListTime", "LotSize", "PriceSpread", "UpdateTime", "HighPrice", "OpenPrice", "LowPrice", "LastClosePrice", "CurPrice", "Volume", "Turnover", "TurnoverRate", });
        internal__static_Qot_GetSecuritySnapshot_Snapshot__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Qot_GetSecuritySnapshot_Snapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.Snapshot, global::Qot_GetSecuritySnapshot.Snapshot.Builder>(internal__static_Qot_GetSecuritySnapshot_Snapshot__Descriptor,
                new string[] { "Basic", "EquityExData", "WarrantExData", "OptionExData", });
        internal__static_Qot_GetSecuritySnapshot_S2C__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Qot_GetSecuritySnapshot_S2C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.S2C, global::Qot_GetSecuritySnapshot.S2C.Builder>(internal__static_Qot_GetSecuritySnapshot_S2C__Descriptor,
                new string[] { "SnapshotList", });
        internal__static_Qot_GetSecuritySnapshot_Request__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Qot_GetSecuritySnapshot_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.Request, global::Qot_GetSecuritySnapshot.Request.Builder>(internal__static_Qot_GetSecuritySnapshot_Request__Descriptor,
                new string[] { "C2S", });
        internal__static_Qot_GetSecuritySnapshot_Response__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Qot_GetSecuritySnapshot_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetSecuritySnapshot.Response, global::Qot_GetSecuritySnapshot.Response.Builder>(internal__static_Qot_GetSecuritySnapshot_Response__Descriptor,
                new string[] { "RetType", "RetMsg", "ErrCode", "S2C", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Common.Common.RegisterAllExtensions(registry);
        global::Qot_Common.QotCommon.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Common.Common.Descriptor, 
          global::Qot_Common.QotCommon.Descriptor, 
          }, assigner);
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2S : pb::GeneratedMessage<C2S, C2S.Builder> {
    private C2S() { }
    private static readonly C2S defaultInstance = new C2S().MakeReadOnly();
    private static readonly string[] _c2SFieldNames = new string[] { "securityList" };
    private static readonly uint[] _c2SFieldTags = new uint[] { 10 };
    public static C2S DefaultInstance {
      get { return defaultInstance; }
    }

    public override C2S DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override C2S ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_C2S__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<C2S, C2S.Builder> InternalFieldAccessors {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_C2S__FieldAccessorTable; }
    }

    public const int SecurityListFieldNumber = 1;
    private pbc::PopsicleList<global::Qot_Common.Security> securityList_ = new pbc::PopsicleList<global::Qot_Common.Security>();
    public scg::IList<global::Qot_Common.Security> SecurityListList {
      get { return securityList_; }
    }
    public int SecurityListCount {
      get { return securityList_.Count; }
    }
    public global::Qot_Common.Security GetSecurityList(int index) {
      return securityList_[index];
    }

    public override bool IsInitialized {
      get {
        foreach (global::Qot_Common.Security element in SecurityListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SFieldNames;
      if (securityList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], securityList_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      foreach (global::Qot_Common.Security element in SecurityListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2S MakeReadOnly() {
      securityList_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2S prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private C2S result;

      private C2S PrepareBuilder() {
        if (resultIsReadOnly) {
          C2S original = result;
          result = new C2S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override C2S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetSecuritySnapshot.C2S.Descriptor; }
      }

      public override C2S DefaultInstanceForType {
        get { return global::Qot_GetSecuritySnapshot.C2S.DefaultInstance; }
      }

      public override C2S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2S) {
          return MergeFrom((C2S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(C2S other) {
        if (other == global::Qot_GetSecuritySnapshot.C2S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.securityList_.Count != 0) {
          result.securityList_.Add(other.securityList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.securityList_, global::Qot_Common.Security.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public pbc::IPopsicleList<global::Qot_Common.Security> SecurityListList {
        get { return PrepareBuilder().securityList_; }
      }
      public int SecurityListCount {
        get { return result.SecurityListCount; }
      }
      public global::Qot_Common.Security GetSecurityList(int index) {
        return result.GetSecurityList(index);
      }
      public Builder SetSecurityList(int index, global::Qot_Common.Security value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.securityList_[index] = value;
        return this;
      }
      public Builder SetSecurityList(int index, global::Qot_Common.Security.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.securityList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSecurityList(global::Qot_Common.Security value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.securityList_.Add(value);
        return this;
      }
      public Builder AddSecurityList(global::Qot_Common.Security.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.securityList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSecurityList(scg::IEnumerable<global::Qot_Common.Security> values) {
        PrepareBuilder();
        result.securityList_.Add(values);
        return this;
      }
      public Builder ClearSecurityList() {
        PrepareBuilder();
        result.securityList_.Clear();
        return this;
      }
    }
    static C2S() {
      object.ReferenceEquals(global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EquitySnapshotExData : pb::GeneratedMessage<EquitySnapshotExData, EquitySnapshotExData.Builder> {
    private EquitySnapshotExData() { }
    private static readonly EquitySnapshotExData defaultInstance = new EquitySnapshotExData().MakeReadOnly();
    private static readonly string[] _equitySnapshotExDataFieldNames = new string[] { "earningsPershare", "eyRate", "issuedMarketVal", "issuedShares", "netAsset", "netAssetPershare", "netProfit", "outstandingMarketVal", "outstandingShares", "pbRate", "peRate", "peTTMRate" };
    private static readonly uint[] _equitySnapshotExDataFieldTags = new uint[] { 41, 73, 17, 8, 25, 65, 33, 57, 48, 89, 81, 97 };
    public static EquitySnapshotExData DefaultInstance {
      get { return defaultInstance; }
    }

    public override EquitySnapshotExData DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override EquitySnapshotExData ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<EquitySnapshotExData, EquitySnapshotExData.Builder> InternalFieldAccessors {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__FieldAccessorTable; }
    }

    public const int IssuedSharesFieldNumber = 1;
    private bool hasIssuedShares;
    private long issuedShares_;
    public bool HasIssuedShares {
      get { return hasIssuedShares; }
    }
    public long IssuedShares {
      get { return issuedShares_; }
    }

    public const int IssuedMarketValFieldNumber = 2;
    private bool hasIssuedMarketVal;
    private double issuedMarketVal_;
    public bool HasIssuedMarketVal {
      get { return hasIssuedMarketVal; }
    }
    public double IssuedMarketVal {
      get { return issuedMarketVal_; }
    }

    public const int NetAssetFieldNumber = 3;
    private bool hasNetAsset;
    private double netAsset_;
    public bool HasNetAsset {
      get { return hasNetAsset; }
    }
    public double NetAsset {
      get { return netAsset_; }
    }

    public const int NetProfitFieldNumber = 4;
    private bool hasNetProfit;
    private double netProfit_;
    public bool HasNetProfit {
      get { return hasNetProfit; }
    }
    public double NetProfit {
      get { return netProfit_; }
    }

    public const int EarningsPershareFieldNumber = 5;
    private bool hasEarningsPershare;
    private double earningsPershare_;
    public bool HasEarningsPershare {
      get { return hasEarningsPershare; }
    }
    public double EarningsPershare {
      get { return earningsPershare_; }
    }

    public const int OutstandingSharesFieldNumber = 6;
    private bool hasOutstandingShares;
    private long outstandingShares_;
    public bool HasOutstandingShares {
      get { return hasOutstandingShares; }
    }
    public long OutstandingShares {
      get { return outstandingShares_; }
    }

    public const int OutstandingMarketValFieldNumber = 7;
    private bool hasOutstandingMarketVal;
    private double outstandingMarketVal_;
    public bool HasOutstandingMarketVal {
      get { return hasOutstandingMarketVal; }
    }
    public double OutstandingMarketVal {
      get { return outstandingMarketVal_; }
    }

    public const int NetAssetPershareFieldNumber = 8;
    private bool hasNetAssetPershare;
    private double netAssetPershare_;
    public bool HasNetAssetPershare {
      get { return hasNetAssetPershare; }
    }
    public double NetAssetPershare {
      get { return netAssetPershare_; }
    }

    public const int EyRateFieldNumber = 9;
    private bool hasEyRate;
    private double eyRate_;
    public bool HasEyRate {
      get { return hasEyRate; }
    }
    public double EyRate {
      get { return eyRate_; }
    }

    public const int PeRateFieldNumber = 10;
    private bool hasPeRate;
    private double peRate_;
    public bool HasPeRate {
      get { return hasPeRate; }
    }
    public double PeRate {
      get { return peRate_; }
    }

    public const int PbRateFieldNumber = 11;
    private bool hasPbRate;
    private double pbRate_;
    public bool HasPbRate {
      get { return hasPbRate; }
    }
    public double PbRate {
      get { return pbRate_; }
    }

    public const int PeTTMRateFieldNumber = 12;
    private bool hasPeTTMRate;
    private double peTTMRate_;
    public bool HasPeTTMRate {
      get { return hasPeTTMRate; }
    }
    public double PeTTMRate {
      get { return peTTMRate_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasIssuedShares) return false;
        if (!hasIssuedMarketVal) return false;
        if (!hasNetAsset) return false;
        if (!hasNetProfit) return false;
        if (!hasEarningsPershare) return false;
        if (!hasOutstandingShares) return false;
        if (!hasOutstandingMarketVal) return false;
        if (!hasNetAssetPershare) return false;
        if (!hasEyRate) return false;
        if (!hasPeRate) return false;
        if (!hasPbRate) return false;
        if (!hasPeTTMRate) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _equitySnapshotExDataFieldNames;
      if (hasIssuedShares) {
        output.WriteInt64(1, field_names[3], IssuedShares);
      }
      if (hasIssuedMarketVal) {
        output.WriteDouble(2, field_names[2], IssuedMarketVal);
      }
      if (hasNetAsset) {
        output.WriteDouble(3, field_names[4], NetAsset);
      }
      if (hasNetProfit) {
        output.WriteDouble(4, field_names[6], NetProfit);
      }
      if (hasEarningsPershare) {
        output.WriteDouble(5, field_names[0], EarningsPershare);
      }
      if (hasOutstandingShares) {
        output.WriteInt64(6, field_names[8], OutstandingShares);
      }
      if (hasOutstandingMarketVal) {
        output.WriteDouble(7, field_names[7], OutstandingMarketVal);
      }
      if (hasNetAssetPershare) {
        output.WriteDouble(8, field_names[5], NetAssetPershare);
      }
      if (hasEyRate) {
        output.WriteDouble(9, field_names[1], EyRate);
      }
      if (hasPeRate) {
        output.WriteDouble(10, field_names[10], PeRate);
      }
      if (hasPbRate) {
        output.WriteDouble(11, field_names[9], PbRate);
      }
      if (hasPeTTMRate) {
        output.WriteDouble(12, field_names[11], PeTTMRate);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasIssuedShares) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, IssuedShares);
      }
      if (hasIssuedMarketVal) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, IssuedMarketVal);
      }
      if (hasNetAsset) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, NetAsset);
      }
      if (hasNetProfit) {
        size += pb::CodedOutputStream.ComputeDoubleSize(4, NetProfit);
      }
      if (hasEarningsPershare) {
        size += pb::CodedOutputStream.ComputeDoubleSize(5, EarningsPershare);
      }
      if (hasOutstandingShares) {
        size += pb::CodedOutputStream.ComputeInt64Size(6, OutstandingShares);
      }
      if (hasOutstandingMarketVal) {
        size += pb::CodedOutputStream.ComputeDoubleSize(7, OutstandingMarketVal);
      }
      if (hasNetAssetPershare) {
        size += pb::CodedOutputStream.ComputeDoubleSize(8, NetAssetPershare);
      }
      if (hasEyRate) {
        size += pb::CodedOutputStream.ComputeDoubleSize(9, EyRate);
      }
      if (hasPeRate) {
        size += pb::CodedOutputStream.ComputeDoubleSize(10, PeRate);
      }
      if (hasPbRate) {
        size += pb::CodedOutputStream.ComputeDoubleSize(11, PbRate);
      }
      if (hasPeTTMRate) {
        size += pb::CodedOutputStream.ComputeDoubleSize(12, PeTTMRate);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EquitySnapshotExData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EquitySnapshotExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EquitySnapshotExData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EquitySnapshotExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EquitySnapshotExData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EquitySnapshotExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EquitySnapshotExData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EquitySnapshotExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EquitySnapshotExData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EquitySnapshotExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EquitySnapshotExData MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EquitySnapshotExData prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EquitySnapshotExData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EquitySnapshotExData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private EquitySnapshotExData result;

      private EquitySnapshotExData PrepareBuilder() {
        if (resultIsReadOnly) {
          EquitySnapshotExData original = result;
          result = new EquitySnapshotExData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override EquitySnapshotExData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetSecuritySnapshot.EquitySnapshotExData.Descriptor; }
      }

      public override EquitySnapshotExData DefaultInstanceForType {
        get { return global::Qot_GetSecuritySnapshot.EquitySnapshotExData.DefaultInstance; }
      }

      public override EquitySnapshotExData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EquitySnapshotExData) {
          return MergeFrom((EquitySnapshotExData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(EquitySnapshotExData other) {
        if (other == global::Qot_GetSecuritySnapshot.EquitySnapshotExData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIssuedShares) {
          IssuedShares = other.IssuedShares;
        }
        if (other.HasIssuedMarketVal) {
          IssuedMarketVal = other.IssuedMarketVal;
        }
        if (other.HasNetAsset) {
          NetAsset = other.NetAsset;
        }
        if (other.HasNetProfit) {
          NetProfit = other.NetProfit;
        }
        if (other.HasEarningsPershare) {
          EarningsPershare = other.EarningsPershare;
        }
        if (other.HasOutstandingShares) {
          OutstandingShares = other.OutstandingShares;
        }
        if (other.HasOutstandingMarketVal) {
          OutstandingMarketVal = other.OutstandingMarketVal;
        }
        if (other.HasNetAssetPershare) {
          NetAssetPershare = other.NetAssetPershare;
        }
        if (other.HasEyRate) {
          EyRate = other.EyRate;
        }
        if (other.HasPeRate) {
          PeRate = other.PeRate;
        }
        if (other.HasPbRate) {
          PbRate = other.PbRate;
        }
        if (other.HasPeTTMRate) {
          PeTTMRate = other.PeTTMRate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_equitySnapshotExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _equitySnapshotExDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIssuedShares = input.ReadInt64(ref result.issuedShares_);
              break;
            }
            case 17: {
              result.hasIssuedMarketVal = input.ReadDouble(ref result.issuedMarketVal_);
              break;
            }
            case 25: {
              result.hasNetAsset = input.ReadDouble(ref result.netAsset_);
              break;
            }
            case 33: {
              result.hasNetProfit = input.ReadDouble(ref result.netProfit_);
              break;
            }
            case 41: {
              result.hasEarningsPershare = input.ReadDouble(ref result.earningsPershare_);
              break;
            }
            case 48: {
              result.hasOutstandingShares = input.ReadInt64(ref result.outstandingShares_);
              break;
            }
            case 57: {
              result.hasOutstandingMarketVal = input.ReadDouble(ref result.outstandingMarketVal_);
              break;
            }
            case 65: {
              result.hasNetAssetPershare = input.ReadDouble(ref result.netAssetPershare_);
              break;
            }
            case 73: {
              result.hasEyRate = input.ReadDouble(ref result.eyRate_);
              break;
            }
            case 81: {
              result.hasPeRate = input.ReadDouble(ref result.peRate_);
              break;
            }
            case 89: {
              result.hasPbRate = input.ReadDouble(ref result.pbRate_);
              break;
            }
            case 97: {
              result.hasPeTTMRate = input.ReadDouble(ref result.peTTMRate_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasIssuedShares {
        get { return result.hasIssuedShares; }
      }
      public long IssuedShares {
        get { return result.IssuedShares; }
        set { SetIssuedShares(value); }
      }
      public Builder SetIssuedShares(long value) {
        PrepareBuilder();
        result.hasIssuedShares = true;
        result.issuedShares_ = value;
        return this;
      }
      public Builder ClearIssuedShares() {
        PrepareBuilder();
        result.hasIssuedShares = false;
        result.issuedShares_ = 0L;
        return this;
      }

      public bool HasIssuedMarketVal {
        get { return result.hasIssuedMarketVal; }
      }
      public double IssuedMarketVal {
        get { return result.IssuedMarketVal; }
        set { SetIssuedMarketVal(value); }
      }
      public Builder SetIssuedMarketVal(double value) {
        PrepareBuilder();
        result.hasIssuedMarketVal = true;
        result.issuedMarketVal_ = value;
        return this;
      }
      public Builder ClearIssuedMarketVal() {
        PrepareBuilder();
        result.hasIssuedMarketVal = false;
        result.issuedMarketVal_ = 0D;
        return this;
      }

      public bool HasNetAsset {
        get { return result.hasNetAsset; }
      }
      public double NetAsset {
        get { return result.NetAsset; }
        set { SetNetAsset(value); }
      }
      public Builder SetNetAsset(double value) {
        PrepareBuilder();
        result.hasNetAsset = true;
        result.netAsset_ = value;
        return this;
      }
      public Builder ClearNetAsset() {
        PrepareBuilder();
        result.hasNetAsset = false;
        result.netAsset_ = 0D;
        return this;
      }

      public bool HasNetProfit {
        get { return result.hasNetProfit; }
      }
      public double NetProfit {
        get { return result.NetProfit; }
        set { SetNetProfit(value); }
      }
      public Builder SetNetProfit(double value) {
        PrepareBuilder();
        result.hasNetProfit = true;
        result.netProfit_ = value;
        return this;
      }
      public Builder ClearNetProfit() {
        PrepareBuilder();
        result.hasNetProfit = false;
        result.netProfit_ = 0D;
        return this;
      }

      public bool HasEarningsPershare {
        get { return result.hasEarningsPershare; }
      }
      public double EarningsPershare {
        get { return result.EarningsPershare; }
        set { SetEarningsPershare(value); }
      }
      public Builder SetEarningsPershare(double value) {
        PrepareBuilder();
        result.hasEarningsPershare = true;
        result.earningsPershare_ = value;
        return this;
      }
      public Builder ClearEarningsPershare() {
        PrepareBuilder();
        result.hasEarningsPershare = false;
        result.earningsPershare_ = 0D;
        return this;
      }

      public bool HasOutstandingShares {
        get { return result.hasOutstandingShares; }
      }
      public long OutstandingShares {
        get { return result.OutstandingShares; }
        set { SetOutstandingShares(value); }
      }
      public Builder SetOutstandingShares(long value) {
        PrepareBuilder();
        result.hasOutstandingShares = true;
        result.outstandingShares_ = value;
        return this;
      }
      public Builder ClearOutstandingShares() {
        PrepareBuilder();
        result.hasOutstandingShares = false;
        result.outstandingShares_ = 0L;
        return this;
      }

      public bool HasOutstandingMarketVal {
        get { return result.hasOutstandingMarketVal; }
      }
      public double OutstandingMarketVal {
        get { return result.OutstandingMarketVal; }
        set { SetOutstandingMarketVal(value); }
      }
      public Builder SetOutstandingMarketVal(double value) {
        PrepareBuilder();
        result.hasOutstandingMarketVal = true;
        result.outstandingMarketVal_ = value;
        return this;
      }
      public Builder ClearOutstandingMarketVal() {
        PrepareBuilder();
        result.hasOutstandingMarketVal = false;
        result.outstandingMarketVal_ = 0D;
        return this;
      }

      public bool HasNetAssetPershare {
        get { return result.hasNetAssetPershare; }
      }
      public double NetAssetPershare {
        get { return result.NetAssetPershare; }
        set { SetNetAssetPershare(value); }
      }
      public Builder SetNetAssetPershare(double value) {
        PrepareBuilder();
        result.hasNetAssetPershare = true;
        result.netAssetPershare_ = value;
        return this;
      }
      public Builder ClearNetAssetPershare() {
        PrepareBuilder();
        result.hasNetAssetPershare = false;
        result.netAssetPershare_ = 0D;
        return this;
      }

      public bool HasEyRate {
        get { return result.hasEyRate; }
      }
      public double EyRate {
        get { return result.EyRate; }
        set { SetEyRate(value); }
      }
      public Builder SetEyRate(double value) {
        PrepareBuilder();
        result.hasEyRate = true;
        result.eyRate_ = value;
        return this;
      }
      public Builder ClearEyRate() {
        PrepareBuilder();
        result.hasEyRate = false;
        result.eyRate_ = 0D;
        return this;
      }

      public bool HasPeRate {
        get { return result.hasPeRate; }
      }
      public double PeRate {
        get { return result.PeRate; }
        set { SetPeRate(value); }
      }
      public Builder SetPeRate(double value) {
        PrepareBuilder();
        result.hasPeRate = true;
        result.peRate_ = value;
        return this;
      }
      public Builder ClearPeRate() {
        PrepareBuilder();
        result.hasPeRate = false;
        result.peRate_ = 0D;
        return this;
      }

      public bool HasPbRate {
        get { return result.hasPbRate; }
      }
      public double PbRate {
        get { return result.PbRate; }
        set { SetPbRate(value); }
      }
      public Builder SetPbRate(double value) {
        PrepareBuilder();
        result.hasPbRate = true;
        result.pbRate_ = value;
        return this;
      }
      public Builder ClearPbRate() {
        PrepareBuilder();
        result.hasPbRate = false;
        result.pbRate_ = 0D;
        return this;
      }

      public bool HasPeTTMRate {
        get { return result.hasPeTTMRate; }
      }
      public double PeTTMRate {
        get { return result.PeTTMRate; }
        set { SetPeTTMRate(value); }
      }
      public Builder SetPeTTMRate(double value) {
        PrepareBuilder();
        result.hasPeTTMRate = true;
        result.peTTMRate_ = value;
        return this;
      }
      public Builder ClearPeTTMRate() {
        PrepareBuilder();
        result.hasPeTTMRate = false;
        result.peTTMRate_ = 0D;
        return this;
      }
    }
    static EquitySnapshotExData() {
      object.ReferenceEquals(global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class WarrantSnapshotExData : pb::GeneratedMessage<WarrantSnapshotExData, WarrantSnapshotExData.Builder> {
    private WarrantSnapshotExData() { }
    private static readonly WarrantSnapshotExData defaultInstance = new WarrantSnapshotExData().MakeReadOnly();
    private static readonly string[] _warrantSnapshotExDataFieldNames = new string[] { "conversionRate", "delta", "endTradeTime", "impliedVolatility", "issueVolumn", "maturityTime", "owner", "premium", "recoveryPrice", "streetRate", "streetVolumn", "strikePrice", "warrantType" };
    private static readonly uint[] _warrantSnapshotExDataFieldTags = new uint[] { 9, 89, 42, 97, 72, 34, 50, 105, 57, 81, 64, 25, 16 };
    public static WarrantSnapshotExData DefaultInstance {
      get { return defaultInstance; }
    }

    public override WarrantSnapshotExData DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override WarrantSnapshotExData ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<WarrantSnapshotExData, WarrantSnapshotExData.Builder> InternalFieldAccessors {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__FieldAccessorTable; }
    }

    public const int ConversionRateFieldNumber = 1;
    private bool hasConversionRate;
    private double conversionRate_;
    public bool HasConversionRate {
      get { return hasConversionRate; }
    }
    public double ConversionRate {
      get { return conversionRate_; }
    }

    public const int WarrantTypeFieldNumber = 2;
    private bool hasWarrantType;
    private int warrantType_;
    public bool HasWarrantType {
      get { return hasWarrantType; }
    }
    public int WarrantType {
      get { return warrantType_; }
    }

    public const int StrikePriceFieldNumber = 3;
    private bool hasStrikePrice;
    private double strikePrice_;
    public bool HasStrikePrice {
      get { return hasStrikePrice; }
    }
    public double StrikePrice {
      get { return strikePrice_; }
    }

    public const int MaturityTimeFieldNumber = 4;
    private bool hasMaturityTime;
    private string maturityTime_ = "";
    public bool HasMaturityTime {
      get { return hasMaturityTime; }
    }
    public string MaturityTime {
      get { return maturityTime_; }
    }

    public const int EndTradeTimeFieldNumber = 5;
    private bool hasEndTradeTime;
    private string endTradeTime_ = "";
    public bool HasEndTradeTime {
      get { return hasEndTradeTime; }
    }
    public string EndTradeTime {
      get { return endTradeTime_; }
    }

    public const int OwnerFieldNumber = 6;
    private bool hasOwner;
    private global::Qot_Common.Security owner_;
    public bool HasOwner {
      get { return hasOwner; }
    }
    public global::Qot_Common.Security Owner {
      get { return owner_ ?? global::Qot_Common.Security.DefaultInstance; }
    }

    public const int RecoveryPriceFieldNumber = 7;
    private bool hasRecoveryPrice;
    private double recoveryPrice_;
    public bool HasRecoveryPrice {
      get { return hasRecoveryPrice; }
    }
    public double RecoveryPrice {
      get { return recoveryPrice_; }
    }

    public const int StreetVolumnFieldNumber = 8;
    private bool hasStreetVolumn;
    private long streetVolumn_;
    public bool HasStreetVolumn {
      get { return hasStreetVolumn; }
    }
    public long StreetVolumn {
      get { return streetVolumn_; }
    }

    public const int IssueVolumnFieldNumber = 9;
    private bool hasIssueVolumn;
    private long issueVolumn_;
    public bool HasIssueVolumn {
      get { return hasIssueVolumn; }
    }
    public long IssueVolumn {
      get { return issueVolumn_; }
    }

    public const int StreetRateFieldNumber = 10;
    private bool hasStreetRate;
    private double streetRate_;
    public bool HasStreetRate {
      get { return hasStreetRate; }
    }
    public double StreetRate {
      get { return streetRate_; }
    }

    public const int DeltaFieldNumber = 11;
    private bool hasDelta;
    private double delta_;
    public bool HasDelta {
      get { return hasDelta; }
    }
    public double Delta {
      get { return delta_; }
    }

    public const int ImpliedVolatilityFieldNumber = 12;
    private bool hasImpliedVolatility;
    private double impliedVolatility_;
    public bool HasImpliedVolatility {
      get { return hasImpliedVolatility; }
    }
    public double ImpliedVolatility {
      get { return impliedVolatility_; }
    }

    public const int PremiumFieldNumber = 13;
    private bool hasPremium;
    private double premium_;
    public bool HasPremium {
      get { return hasPremium; }
    }
    public double Premium {
      get { return premium_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasConversionRate) return false;
        if (!hasWarrantType) return false;
        if (!hasStrikePrice) return false;
        if (!hasMaturityTime) return false;
        if (!hasEndTradeTime) return false;
        if (!hasOwner) return false;
        if (!hasRecoveryPrice) return false;
        if (!hasStreetVolumn) return false;
        if (!hasIssueVolumn) return false;
        if (!hasStreetRate) return false;
        if (!hasDelta) return false;
        if (!hasImpliedVolatility) return false;
        if (!hasPremium) return false;
        if (!Owner.IsInitialized) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _warrantSnapshotExDataFieldNames;
      if (hasConversionRate) {
        output.WriteDouble(1, field_names[0], ConversionRate);
      }
      if (hasWarrantType) {
        output.WriteInt32(2, field_names[12], WarrantType);
      }
      if (hasStrikePrice) {
        output.WriteDouble(3, field_names[11], StrikePrice);
      }
      if (hasMaturityTime) {
        output.WriteString(4, field_names[5], MaturityTime);
      }
      if (hasEndTradeTime) {
        output.WriteString(5, field_names[2], EndTradeTime);
      }
      if (hasOwner) {
        output.WriteMessage(6, field_names[6], Owner);
      }
      if (hasRecoveryPrice) {
        output.WriteDouble(7, field_names[8], RecoveryPrice);
      }
      if (hasStreetVolumn) {
        output.WriteInt64(8, field_names[10], StreetVolumn);
      }
      if (hasIssueVolumn) {
        output.WriteInt64(9, field_names[4], IssueVolumn);
      }
      if (hasStreetRate) {
        output.WriteDouble(10, field_names[9], StreetRate);
      }
      if (hasDelta) {
        output.WriteDouble(11, field_names[1], Delta);
      }
      if (hasImpliedVolatility) {
        output.WriteDouble(12, field_names[3], ImpliedVolatility);
      }
      if (hasPremium) {
        output.WriteDouble(13, field_names[7], Premium);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasConversionRate) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, ConversionRate);
      }
      if (hasWarrantType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, WarrantType);
      }
      if (hasStrikePrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, StrikePrice);
      }
      if (hasMaturityTime) {
        size += pb::CodedOutputStream.ComputeStringSize(4, MaturityTime);
      }
      if (hasEndTradeTime) {
        size += pb::CodedOutputStream.ComputeStringSize(5, EndTradeTime);
      }
      if (hasOwner) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Owner);
      }
      if (hasRecoveryPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(7, RecoveryPrice);
      }
      if (hasStreetVolumn) {
        size += pb::CodedOutputStream.ComputeInt64Size(8, StreetVolumn);
      }
      if (hasIssueVolumn) {
        size += pb::CodedOutputStream.ComputeInt64Size(9, IssueVolumn);
      }
      if (hasStreetRate) {
        size += pb::CodedOutputStream.ComputeDoubleSize(10, StreetRate);
      }
      if (hasDelta) {
        size += pb::CodedOutputStream.ComputeDoubleSize(11, Delta);
      }
      if (hasImpliedVolatility) {
        size += pb::CodedOutputStream.ComputeDoubleSize(12, ImpliedVolatility);
      }
      if (hasPremium) {
        size += pb::CodedOutputStream.ComputeDoubleSize(13, Premium);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static WarrantSnapshotExData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WarrantSnapshotExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WarrantSnapshotExData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WarrantSnapshotExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WarrantSnapshotExData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WarrantSnapshotExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WarrantSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WarrantSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WarrantSnapshotExData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WarrantSnapshotExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WarrantSnapshotExData MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WarrantSnapshotExData prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<WarrantSnapshotExData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WarrantSnapshotExData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private WarrantSnapshotExData result;

      private WarrantSnapshotExData PrepareBuilder() {
        if (resultIsReadOnly) {
          WarrantSnapshotExData original = result;
          result = new WarrantSnapshotExData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override WarrantSnapshotExData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetSecuritySnapshot.WarrantSnapshotExData.Descriptor; }
      }

      public override WarrantSnapshotExData DefaultInstanceForType {
        get { return global::Qot_GetSecuritySnapshot.WarrantSnapshotExData.DefaultInstance; }
      }

      public override WarrantSnapshotExData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WarrantSnapshotExData) {
          return MergeFrom((WarrantSnapshotExData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(WarrantSnapshotExData other) {
        if (other == global::Qot_GetSecuritySnapshot.WarrantSnapshotExData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasConversionRate) {
          ConversionRate = other.ConversionRate;
        }
        if (other.HasWarrantType) {
          WarrantType = other.WarrantType;
        }
        if (other.HasStrikePrice) {
          StrikePrice = other.StrikePrice;
        }
        if (other.HasMaturityTime) {
          MaturityTime = other.MaturityTime;
        }
        if (other.HasEndTradeTime) {
          EndTradeTime = other.EndTradeTime;
        }
        if (other.HasOwner) {
          MergeOwner(other.Owner);
        }
        if (other.HasRecoveryPrice) {
          RecoveryPrice = other.RecoveryPrice;
        }
        if (other.HasStreetVolumn) {
          StreetVolumn = other.StreetVolumn;
        }
        if (other.HasIssueVolumn) {
          IssueVolumn = other.IssueVolumn;
        }
        if (other.HasStreetRate) {
          StreetRate = other.StreetRate;
        }
        if (other.HasDelta) {
          Delta = other.Delta;
        }
        if (other.HasImpliedVolatility) {
          ImpliedVolatility = other.ImpliedVolatility;
        }
        if (other.HasPremium) {
          Premium = other.Premium;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_warrantSnapshotExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _warrantSnapshotExDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasConversionRate = input.ReadDouble(ref result.conversionRate_);
              break;
            }
            case 16: {
              result.hasWarrantType = input.ReadInt32(ref result.warrantType_);
              break;
            }
            case 25: {
              result.hasStrikePrice = input.ReadDouble(ref result.strikePrice_);
              break;
            }
            case 34: {
              result.hasMaturityTime = input.ReadString(ref result.maturityTime_);
              break;
            }
            case 42: {
              result.hasEndTradeTime = input.ReadString(ref result.endTradeTime_);
              break;
            }
            case 50: {
              global::Qot_Common.Security.Builder subBuilder = global::Qot_Common.Security.CreateBuilder();
              if (result.hasOwner) {
                subBuilder.MergeFrom(Owner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Owner = subBuilder.BuildPartial();
              break;
            }
            case 57: {
              result.hasRecoveryPrice = input.ReadDouble(ref result.recoveryPrice_);
              break;
            }
            case 64: {
              result.hasStreetVolumn = input.ReadInt64(ref result.streetVolumn_);
              break;
            }
            case 72: {
              result.hasIssueVolumn = input.ReadInt64(ref result.issueVolumn_);
              break;
            }
            case 81: {
              result.hasStreetRate = input.ReadDouble(ref result.streetRate_);
              break;
            }
            case 89: {
              result.hasDelta = input.ReadDouble(ref result.delta_);
              break;
            }
            case 97: {
              result.hasImpliedVolatility = input.ReadDouble(ref result.impliedVolatility_);
              break;
            }
            case 105: {
              result.hasPremium = input.ReadDouble(ref result.premium_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasConversionRate {
        get { return result.hasConversionRate; }
      }
      public double ConversionRate {
        get { return result.ConversionRate; }
        set { SetConversionRate(value); }
      }
      public Builder SetConversionRate(double value) {
        PrepareBuilder();
        result.hasConversionRate = true;
        result.conversionRate_ = value;
        return this;
      }
      public Builder ClearConversionRate() {
        PrepareBuilder();
        result.hasConversionRate = false;
        result.conversionRate_ = 0D;
        return this;
      }

      public bool HasWarrantType {
        get { return result.hasWarrantType; }
      }
      public int WarrantType {
        get { return result.WarrantType; }
        set { SetWarrantType(value); }
      }
      public Builder SetWarrantType(int value) {
        PrepareBuilder();
        result.hasWarrantType = true;
        result.warrantType_ = value;
        return this;
      }
      public Builder ClearWarrantType() {
        PrepareBuilder();
        result.hasWarrantType = false;
        result.warrantType_ = 0;
        return this;
      }

      public bool HasStrikePrice {
        get { return result.hasStrikePrice; }
      }
      public double StrikePrice {
        get { return result.StrikePrice; }
        set { SetStrikePrice(value); }
      }
      public Builder SetStrikePrice(double value) {
        PrepareBuilder();
        result.hasStrikePrice = true;
        result.strikePrice_ = value;
        return this;
      }
      public Builder ClearStrikePrice() {
        PrepareBuilder();
        result.hasStrikePrice = false;
        result.strikePrice_ = 0D;
        return this;
      }

      public bool HasMaturityTime {
        get { return result.hasMaturityTime; }
      }
      public string MaturityTime {
        get { return result.MaturityTime; }
        set { SetMaturityTime(value); }
      }
      public Builder SetMaturityTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMaturityTime = true;
        result.maturityTime_ = value;
        return this;
      }
      public Builder ClearMaturityTime() {
        PrepareBuilder();
        result.hasMaturityTime = false;
        result.maturityTime_ = "";
        return this;
      }

      public bool HasEndTradeTime {
        get { return result.hasEndTradeTime; }
      }
      public string EndTradeTime {
        get { return result.EndTradeTime; }
        set { SetEndTradeTime(value); }
      }
      public Builder SetEndTradeTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEndTradeTime = true;
        result.endTradeTime_ = value;
        return this;
      }
      public Builder ClearEndTradeTime() {
        PrepareBuilder();
        result.hasEndTradeTime = false;
        result.endTradeTime_ = "";
        return this;
      }

      public bool HasOwner {
       get { return result.hasOwner; }
      }
      public global::Qot_Common.Security Owner {
        get { return result.Owner; }
        set { SetOwner(value); }
      }
      public Builder SetOwner(global::Qot_Common.Security value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOwner = true;
        result.owner_ = value;
        return this;
      }
      public Builder SetOwner(global::Qot_Common.Security.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOwner = true;
        result.owner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOwner(global::Qot_Common.Security value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOwner &&
            result.owner_ != global::Qot_Common.Security.DefaultInstance) {
            result.owner_ = global::Qot_Common.Security.CreateBuilder(result.owner_).MergeFrom(value).BuildPartial();
        } else {
          result.owner_ = value;
        }
        result.hasOwner = true;
        return this;
      }
      public Builder ClearOwner() {
        PrepareBuilder();
        result.hasOwner = false;
        result.owner_ = null;
        return this;
      }

      public bool HasRecoveryPrice {
        get { return result.hasRecoveryPrice; }
      }
      public double RecoveryPrice {
        get { return result.RecoveryPrice; }
        set { SetRecoveryPrice(value); }
      }
      public Builder SetRecoveryPrice(double value) {
        PrepareBuilder();
        result.hasRecoveryPrice = true;
        result.recoveryPrice_ = value;
        return this;
      }
      public Builder ClearRecoveryPrice() {
        PrepareBuilder();
        result.hasRecoveryPrice = false;
        result.recoveryPrice_ = 0D;
        return this;
      }

      public bool HasStreetVolumn {
        get { return result.hasStreetVolumn; }
      }
      public long StreetVolumn {
        get { return result.StreetVolumn; }
        set { SetStreetVolumn(value); }
      }
      public Builder SetStreetVolumn(long value) {
        PrepareBuilder();
        result.hasStreetVolumn = true;
        result.streetVolumn_ = value;
        return this;
      }
      public Builder ClearStreetVolumn() {
        PrepareBuilder();
        result.hasStreetVolumn = false;
        result.streetVolumn_ = 0L;
        return this;
      }

      public bool HasIssueVolumn {
        get { return result.hasIssueVolumn; }
      }
      public long IssueVolumn {
        get { return result.IssueVolumn; }
        set { SetIssueVolumn(value); }
      }
      public Builder SetIssueVolumn(long value) {
        PrepareBuilder();
        result.hasIssueVolumn = true;
        result.issueVolumn_ = value;
        return this;
      }
      public Builder ClearIssueVolumn() {
        PrepareBuilder();
        result.hasIssueVolumn = false;
        result.issueVolumn_ = 0L;
        return this;
      }

      public bool HasStreetRate {
        get { return result.hasStreetRate; }
      }
      public double StreetRate {
        get { return result.StreetRate; }
        set { SetStreetRate(value); }
      }
      public Builder SetStreetRate(double value) {
        PrepareBuilder();
        result.hasStreetRate = true;
        result.streetRate_ = value;
        return this;
      }
      public Builder ClearStreetRate() {
        PrepareBuilder();
        result.hasStreetRate = false;
        result.streetRate_ = 0D;
        return this;
      }

      public bool HasDelta {
        get { return result.hasDelta; }
      }
      public double Delta {
        get { return result.Delta; }
        set { SetDelta(value); }
      }
      public Builder SetDelta(double value) {
        PrepareBuilder();
        result.hasDelta = true;
        result.delta_ = value;
        return this;
      }
      public Builder ClearDelta() {
        PrepareBuilder();
        result.hasDelta = false;
        result.delta_ = 0D;
        return this;
      }

      public bool HasImpliedVolatility {
        get { return result.hasImpliedVolatility; }
      }
      public double ImpliedVolatility {
        get { return result.ImpliedVolatility; }
        set { SetImpliedVolatility(value); }
      }
      public Builder SetImpliedVolatility(double value) {
        PrepareBuilder();
        result.hasImpliedVolatility = true;
        result.impliedVolatility_ = value;
        return this;
      }
      public Builder ClearImpliedVolatility() {
        PrepareBuilder();
        result.hasImpliedVolatility = false;
        result.impliedVolatility_ = 0D;
        return this;
      }

      public bool HasPremium {
        get { return result.hasPremium; }
      }
      public double Premium {
        get { return result.Premium; }
        set { SetPremium(value); }
      }
      public Builder SetPremium(double value) {
        PrepareBuilder();
        result.hasPremium = true;
        result.premium_ = value;
        return this;
      }
      public Builder ClearPremium() {
        PrepareBuilder();
        result.hasPremium = false;
        result.premium_ = 0D;
        return this;
      }
    }
    static WarrantSnapshotExData() {
      object.ReferenceEquals(global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OptionSnapshotExData : pb::GeneratedMessage<OptionSnapshotExData, OptionSnapshotExData.Builder> {
    private OptionSnapshotExData() { }
    private static readonly OptionSnapshotExData defaultInstance = new OptionSnapshotExData().MakeReadOnly();
    private static readonly string[] _optionSnapshotExDataFieldNames = new string[] { "contractSize", "delta", "gamma", "impliedVolatility", "openInterest", "owner", "premium", "rho", "strikePrice", "strikeTime", "theta", "type", "vega" };
    private static readonly uint[] _optionSnapshotExDataFieldTags = new uint[] { 40, 73, 81, 57, 48, 18, 65, 105, 33, 26, 97, 8, 89 };
    public static OptionSnapshotExData DefaultInstance {
      get { return defaultInstance; }
    }

    public override OptionSnapshotExData DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override OptionSnapshotExData ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<OptionSnapshotExData, OptionSnapshotExData.Builder> InternalFieldAccessors {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__FieldAccessorTable; }
    }

    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }

    public const int OwnerFieldNumber = 2;
    private bool hasOwner;
    private global::Qot_Common.Security owner_;
    public bool HasOwner {
      get { return hasOwner; }
    }
    public global::Qot_Common.Security Owner {
      get { return owner_ ?? global::Qot_Common.Security.DefaultInstance; }
    }

    public const int StrikeTimeFieldNumber = 3;
    private bool hasStrikeTime;
    private string strikeTime_ = "";
    public bool HasStrikeTime {
      get { return hasStrikeTime; }
    }
    public string StrikeTime {
      get { return strikeTime_; }
    }

    public const int StrikePriceFieldNumber = 4;
    private bool hasStrikePrice;
    private double strikePrice_;
    public bool HasStrikePrice {
      get { return hasStrikePrice; }
    }
    public double StrikePrice {
      get { return strikePrice_; }
    }

    public const int ContractSizeFieldNumber = 5;
    private bool hasContractSize;
    private int contractSize_;
    public bool HasContractSize {
      get { return hasContractSize; }
    }
    public int ContractSize {
      get { return contractSize_; }
    }

    public const int OpenInterestFieldNumber = 6;
    private bool hasOpenInterest;
    private int openInterest_;
    public bool HasOpenInterest {
      get { return hasOpenInterest; }
    }
    public int OpenInterest {
      get { return openInterest_; }
    }

    public const int ImpliedVolatilityFieldNumber = 7;
    private bool hasImpliedVolatility;
    private double impliedVolatility_;
    public bool HasImpliedVolatility {
      get { return hasImpliedVolatility; }
    }
    public double ImpliedVolatility {
      get { return impliedVolatility_; }
    }

    public const int PremiumFieldNumber = 8;
    private bool hasPremium;
    private double premium_;
    public bool HasPremium {
      get { return hasPremium; }
    }
    public double Premium {
      get { return premium_; }
    }

    public const int DeltaFieldNumber = 9;
    private bool hasDelta;
    private double delta_;
    public bool HasDelta {
      get { return hasDelta; }
    }
    public double Delta {
      get { return delta_; }
    }

    public const int GammaFieldNumber = 10;
    private bool hasGamma;
    private double gamma_;
    public bool HasGamma {
      get { return hasGamma; }
    }
    public double Gamma {
      get { return gamma_; }
    }

    public const int VegaFieldNumber = 11;
    private bool hasVega;
    private double vega_;
    public bool HasVega {
      get { return hasVega; }
    }
    public double Vega {
      get { return vega_; }
    }

    public const int ThetaFieldNumber = 12;
    private bool hasTheta;
    private double theta_;
    public bool HasTheta {
      get { return hasTheta; }
    }
    public double Theta {
      get { return theta_; }
    }

    public const int RhoFieldNumber = 13;
    private bool hasRho;
    private double rho_;
    public bool HasRho {
      get { return hasRho; }
    }
    public double Rho {
      get { return rho_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasOwner) return false;
        if (!hasStrikeTime) return false;
        if (!hasStrikePrice) return false;
        if (!hasContractSize) return false;
        if (!hasOpenInterest) return false;
        if (!hasImpliedVolatility) return false;
        if (!hasPremium) return false;
        if (!hasDelta) return false;
        if (!hasGamma) return false;
        if (!hasVega) return false;
        if (!hasTheta) return false;
        if (!hasRho) return false;
        if (!Owner.IsInitialized) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _optionSnapshotExDataFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[11], Type);
      }
      if (hasOwner) {
        output.WriteMessage(2, field_names[5], Owner);
      }
      if (hasStrikeTime) {
        output.WriteString(3, field_names[9], StrikeTime);
      }
      if (hasStrikePrice) {
        output.WriteDouble(4, field_names[8], StrikePrice);
      }
      if (hasContractSize) {
        output.WriteInt32(5, field_names[0], ContractSize);
      }
      if (hasOpenInterest) {
        output.WriteInt32(6, field_names[4], OpenInterest);
      }
      if (hasImpliedVolatility) {
        output.WriteDouble(7, field_names[3], ImpliedVolatility);
      }
      if (hasPremium) {
        output.WriteDouble(8, field_names[6], Premium);
      }
      if (hasDelta) {
        output.WriteDouble(9, field_names[1], Delta);
      }
      if (hasGamma) {
        output.WriteDouble(10, field_names[2], Gamma);
      }
      if (hasVega) {
        output.WriteDouble(11, field_names[12], Vega);
      }
      if (hasTheta) {
        output.WriteDouble(12, field_names[10], Theta);
      }
      if (hasRho) {
        output.WriteDouble(13, field_names[7], Rho);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      if (hasOwner) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Owner);
      }
      if (hasStrikeTime) {
        size += pb::CodedOutputStream.ComputeStringSize(3, StrikeTime);
      }
      if (hasStrikePrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(4, StrikePrice);
      }
      if (hasContractSize) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, ContractSize);
      }
      if (hasOpenInterest) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, OpenInterest);
      }
      if (hasImpliedVolatility) {
        size += pb::CodedOutputStream.ComputeDoubleSize(7, ImpliedVolatility);
      }
      if (hasPremium) {
        size += pb::CodedOutputStream.ComputeDoubleSize(8, Premium);
      }
      if (hasDelta) {
        size += pb::CodedOutputStream.ComputeDoubleSize(9, Delta);
      }
      if (hasGamma) {
        size += pb::CodedOutputStream.ComputeDoubleSize(10, Gamma);
      }
      if (hasVega) {
        size += pb::CodedOutputStream.ComputeDoubleSize(11, Vega);
      }
      if (hasTheta) {
        size += pb::CodedOutputStream.ComputeDoubleSize(12, Theta);
      }
      if (hasRho) {
        size += pb::CodedOutputStream.ComputeDoubleSize(13, Rho);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static OptionSnapshotExData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OptionSnapshotExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OptionSnapshotExData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OptionSnapshotExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OptionSnapshotExData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OptionSnapshotExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OptionSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OptionSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OptionSnapshotExData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OptionSnapshotExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OptionSnapshotExData MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OptionSnapshotExData prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<OptionSnapshotExData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OptionSnapshotExData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private OptionSnapshotExData result;

      private OptionSnapshotExData PrepareBuilder() {
        if (resultIsReadOnly) {
          OptionSnapshotExData original = result;
          result = new OptionSnapshotExData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override OptionSnapshotExData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetSecuritySnapshot.OptionSnapshotExData.Descriptor; }
      }

      public override OptionSnapshotExData DefaultInstanceForType {
        get { return global::Qot_GetSecuritySnapshot.OptionSnapshotExData.DefaultInstance; }
      }

      public override OptionSnapshotExData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OptionSnapshotExData) {
          return MergeFrom((OptionSnapshotExData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(OptionSnapshotExData other) {
        if (other == global::Qot_GetSecuritySnapshot.OptionSnapshotExData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasOwner) {
          MergeOwner(other.Owner);
        }
        if (other.HasStrikeTime) {
          StrikeTime = other.StrikeTime;
        }
        if (other.HasStrikePrice) {
          StrikePrice = other.StrikePrice;
        }
        if (other.HasContractSize) {
          ContractSize = other.ContractSize;
        }
        if (other.HasOpenInterest) {
          OpenInterest = other.OpenInterest;
        }
        if (other.HasImpliedVolatility) {
          ImpliedVolatility = other.ImpliedVolatility;
        }
        if (other.HasPremium) {
          Premium = other.Premium;
        }
        if (other.HasDelta) {
          Delta = other.Delta;
        }
        if (other.HasGamma) {
          Gamma = other.Gamma;
        }
        if (other.HasVega) {
          Vega = other.Vega;
        }
        if (other.HasTheta) {
          Theta = other.Theta;
        }
        if (other.HasRho) {
          Rho = other.Rho;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_optionSnapshotExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _optionSnapshotExDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 18: {
              global::Qot_Common.Security.Builder subBuilder = global::Qot_Common.Security.CreateBuilder();
              if (result.hasOwner) {
                subBuilder.MergeFrom(Owner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Owner = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasStrikeTime = input.ReadString(ref result.strikeTime_);
              break;
            }
            case 33: {
              result.hasStrikePrice = input.ReadDouble(ref result.strikePrice_);
              break;
            }
            case 40: {
              result.hasContractSize = input.ReadInt32(ref result.contractSize_);
              break;
            }
            case 48: {
              result.hasOpenInterest = input.ReadInt32(ref result.openInterest_);
              break;
            }
            case 57: {
              result.hasImpliedVolatility = input.ReadDouble(ref result.impliedVolatility_);
              break;
            }
            case 65: {
              result.hasPremium = input.ReadDouble(ref result.premium_);
              break;
            }
            case 73: {
              result.hasDelta = input.ReadDouble(ref result.delta_);
              break;
            }
            case 81: {
              result.hasGamma = input.ReadDouble(ref result.gamma_);
              break;
            }
            case 89: {
              result.hasVega = input.ReadDouble(ref result.vega_);
              break;
            }
            case 97: {
              result.hasTheta = input.ReadDouble(ref result.theta_);
              break;
            }
            case 105: {
              result.hasRho = input.ReadDouble(ref result.rho_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }

      public bool HasOwner {
       get { return result.hasOwner; }
      }
      public global::Qot_Common.Security Owner {
        get { return result.Owner; }
        set { SetOwner(value); }
      }
      public Builder SetOwner(global::Qot_Common.Security value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOwner = true;
        result.owner_ = value;
        return this;
      }
      public Builder SetOwner(global::Qot_Common.Security.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOwner = true;
        result.owner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOwner(global::Qot_Common.Security value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOwner &&
            result.owner_ != global::Qot_Common.Security.DefaultInstance) {
            result.owner_ = global::Qot_Common.Security.CreateBuilder(result.owner_).MergeFrom(value).BuildPartial();
        } else {
          result.owner_ = value;
        }
        result.hasOwner = true;
        return this;
      }
      public Builder ClearOwner() {
        PrepareBuilder();
        result.hasOwner = false;
        result.owner_ = null;
        return this;
      }

      public bool HasStrikeTime {
        get { return result.hasStrikeTime; }
      }
      public string StrikeTime {
        get { return result.StrikeTime; }
        set { SetStrikeTime(value); }
      }
      public Builder SetStrikeTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrikeTime = true;
        result.strikeTime_ = value;
        return this;
      }
      public Builder ClearStrikeTime() {
        PrepareBuilder();
        result.hasStrikeTime = false;
        result.strikeTime_ = "";
        return this;
      }

      public bool HasStrikePrice {
        get { return result.hasStrikePrice; }
      }
      public double StrikePrice {
        get { return result.StrikePrice; }
        set { SetStrikePrice(value); }
      }
      public Builder SetStrikePrice(double value) {
        PrepareBuilder();
        result.hasStrikePrice = true;
        result.strikePrice_ = value;
        return this;
      }
      public Builder ClearStrikePrice() {
        PrepareBuilder();
        result.hasStrikePrice = false;
        result.strikePrice_ = 0D;
        return this;
      }

      public bool HasContractSize {
        get { return result.hasContractSize; }
      }
      public int ContractSize {
        get { return result.ContractSize; }
        set { SetContractSize(value); }
      }
      public Builder SetContractSize(int value) {
        PrepareBuilder();
        result.hasContractSize = true;
        result.contractSize_ = value;
        return this;
      }
      public Builder ClearContractSize() {
        PrepareBuilder();
        result.hasContractSize = false;
        result.contractSize_ = 0;
        return this;
      }

      public bool HasOpenInterest {
        get { return result.hasOpenInterest; }
      }
      public int OpenInterest {
        get { return result.OpenInterest; }
        set { SetOpenInterest(value); }
      }
      public Builder SetOpenInterest(int value) {
        PrepareBuilder();
        result.hasOpenInterest = true;
        result.openInterest_ = value;
        return this;
      }
      public Builder ClearOpenInterest() {
        PrepareBuilder();
        result.hasOpenInterest = false;
        result.openInterest_ = 0;
        return this;
      }

      public bool HasImpliedVolatility {
        get { return result.hasImpliedVolatility; }
      }
      public double ImpliedVolatility {
        get { return result.ImpliedVolatility; }
        set { SetImpliedVolatility(value); }
      }
      public Builder SetImpliedVolatility(double value) {
        PrepareBuilder();
        result.hasImpliedVolatility = true;
        result.impliedVolatility_ = value;
        return this;
      }
      public Builder ClearImpliedVolatility() {
        PrepareBuilder();
        result.hasImpliedVolatility = false;
        result.impliedVolatility_ = 0D;
        return this;
      }

      public bool HasPremium {
        get { return result.hasPremium; }
      }
      public double Premium {
        get { return result.Premium; }
        set { SetPremium(value); }
      }
      public Builder SetPremium(double value) {
        PrepareBuilder();
        result.hasPremium = true;
        result.premium_ = value;
        return this;
      }
      public Builder ClearPremium() {
        PrepareBuilder();
        result.hasPremium = false;
        result.premium_ = 0D;
        return this;
      }

      public bool HasDelta {
        get { return result.hasDelta; }
      }
      public double Delta {
        get { return result.Delta; }
        set { SetDelta(value); }
      }
      public Builder SetDelta(double value) {
        PrepareBuilder();
        result.hasDelta = true;
        result.delta_ = value;
        return this;
      }
      public Builder ClearDelta() {
        PrepareBuilder();
        result.hasDelta = false;
        result.delta_ = 0D;
        return this;
      }

      public bool HasGamma {
        get { return result.hasGamma; }
      }
      public double Gamma {
        get { return result.Gamma; }
        set { SetGamma(value); }
      }
      public Builder SetGamma(double value) {
        PrepareBuilder();
        result.hasGamma = true;
        result.gamma_ = value;
        return this;
      }
      public Builder ClearGamma() {
        PrepareBuilder();
        result.hasGamma = false;
        result.gamma_ = 0D;
        return this;
      }

      public bool HasVega {
        get { return result.hasVega; }
      }
      public double Vega {
        get { return result.Vega; }
        set { SetVega(value); }
      }
      public Builder SetVega(double value) {
        PrepareBuilder();
        result.hasVega = true;
        result.vega_ = value;
        return this;
      }
      public Builder ClearVega() {
        PrepareBuilder();
        result.hasVega = false;
        result.vega_ = 0D;
        return this;
      }

      public bool HasTheta {
        get { return result.hasTheta; }
      }
      public double Theta {
        get { return result.Theta; }
        set { SetTheta(value); }
      }
      public Builder SetTheta(double value) {
        PrepareBuilder();
        result.hasTheta = true;
        result.theta_ = value;
        return this;
      }
      public Builder ClearTheta() {
        PrepareBuilder();
        result.hasTheta = false;
        result.theta_ = 0D;
        return this;
      }

      public bool HasRho {
        get { return result.hasRho; }
      }
      public double Rho {
        get { return result.Rho; }
        set { SetRho(value); }
      }
      public Builder SetRho(double value) {
        PrepareBuilder();
        result.hasRho = true;
        result.rho_ = value;
        return this;
      }
      public Builder ClearRho() {
        PrepareBuilder();
        result.hasRho = false;
        result.rho_ = 0D;
        return this;
      }
    }
    static OptionSnapshotExData() {
      object.ReferenceEquals(global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SnapshotBasicData : pb::GeneratedMessage<SnapshotBasicData, SnapshotBasicData.Builder> {
    private SnapshotBasicData() { }
    private static readonly SnapshotBasicData defaultInstance = new SnapshotBasicData().MakeReadOnly();
    private static readonly string[] _snapshotBasicDataFieldNames = new string[] { "curPrice", "highPrice", "isSuspend", "lastClosePrice", "listTime", "lotSize", "lowPrice", "openPrice", "priceSpread", "security", "turnover", "turnoverRate", "type", "updateTime", "volume" };
    private static readonly uint[] _snapshotBasicDataFieldTags = new uint[] { 97, 65, 24, 89, 34, 40, 81, 73, 49, 10, 113, 121, 16, 58, 104 };
    public static SnapshotBasicData DefaultInstance {
      get { return defaultInstance; }
    }

    public override SnapshotBasicData DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override SnapshotBasicData ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<SnapshotBasicData, SnapshotBasicData.Builder> InternalFieldAccessors {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__FieldAccessorTable; }
    }

    public const int SecurityFieldNumber = 1;
    private bool hasSecurity;
    private global::Qot_Common.Security security_;
    public bool HasSecurity {
      get { return hasSecurity; }
    }
    public global::Qot_Common.Security Security {
      get { return security_ ?? global::Qot_Common.Security.DefaultInstance; }
    }

    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }

    public const int IsSuspendFieldNumber = 3;
    private bool hasIsSuspend;
    private bool isSuspend_;
    public bool HasIsSuspend {
      get { return hasIsSuspend; }
    }
    public bool IsSuspend {
      get { return isSuspend_; }
    }

    public const int ListTimeFieldNumber = 4;
    private bool hasListTime;
    private string listTime_ = "";
    public bool HasListTime {
      get { return hasListTime; }
    }
    public string ListTime {
      get { return listTime_; }
    }

    public const int LotSizeFieldNumber = 5;
    private bool hasLotSize;
    private int lotSize_;
    public bool HasLotSize {
      get { return hasLotSize; }
    }
    public int LotSize {
      get { return lotSize_; }
    }

    public const int PriceSpreadFieldNumber = 6;
    private bool hasPriceSpread;
    private double priceSpread_;
    public bool HasPriceSpread {
      get { return hasPriceSpread; }
    }
    public double PriceSpread {
      get { return priceSpread_; }
    }

    public const int UpdateTimeFieldNumber = 7;
    private bool hasUpdateTime;
    private string updateTime_ = "";
    public bool HasUpdateTime {
      get { return hasUpdateTime; }
    }
    public string UpdateTime {
      get { return updateTime_; }
    }

    public const int HighPriceFieldNumber = 8;
    private bool hasHighPrice;
    private double highPrice_;
    public bool HasHighPrice {
      get { return hasHighPrice; }
    }
    public double HighPrice {
      get { return highPrice_; }
    }

    public const int OpenPriceFieldNumber = 9;
    private bool hasOpenPrice;
    private double openPrice_;
    public bool HasOpenPrice {
      get { return hasOpenPrice; }
    }
    public double OpenPrice {
      get { return openPrice_; }
    }

    public const int LowPriceFieldNumber = 10;
    private bool hasLowPrice;
    private double lowPrice_;
    public bool HasLowPrice {
      get { return hasLowPrice; }
    }
    public double LowPrice {
      get { return lowPrice_; }
    }

    public const int LastClosePriceFieldNumber = 11;
    private bool hasLastClosePrice;
    private double lastClosePrice_;
    public bool HasLastClosePrice {
      get { return hasLastClosePrice; }
    }
    public double LastClosePrice {
      get { return lastClosePrice_; }
    }

    public const int CurPriceFieldNumber = 12;
    private bool hasCurPrice;
    private double curPrice_;
    public bool HasCurPrice {
      get { return hasCurPrice; }
    }
    public double CurPrice {
      get { return curPrice_; }
    }

    public const int VolumeFieldNumber = 13;
    private bool hasVolume;
    private long volume_;
    public bool HasVolume {
      get { return hasVolume; }
    }
    public long Volume {
      get { return volume_; }
    }

    public const int TurnoverFieldNumber = 14;
    private bool hasTurnover;
    private double turnover_;
    public bool HasTurnover {
      get { return hasTurnover; }
    }
    public double Turnover {
      get { return turnover_; }
    }

    public const int TurnoverRateFieldNumber = 15;
    private bool hasTurnoverRate;
    private double turnoverRate_;
    public bool HasTurnoverRate {
      get { return hasTurnoverRate; }
    }
    public double TurnoverRate {
      get { return turnoverRate_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasSecurity) return false;
        if (!hasType) return false;
        if (!hasIsSuspend) return false;
        if (!hasListTime) return false;
        if (!hasLotSize) return false;
        if (!hasPriceSpread) return false;
        if (!hasUpdateTime) return false;
        if (!hasHighPrice) return false;
        if (!hasOpenPrice) return false;
        if (!hasLowPrice) return false;
        if (!hasLastClosePrice) return false;
        if (!hasCurPrice) return false;
        if (!hasVolume) return false;
        if (!hasTurnover) return false;
        if (!hasTurnoverRate) return false;
        if (!Security.IsInitialized) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _snapshotBasicDataFieldNames;
      if (hasSecurity) {
        output.WriteMessage(1, field_names[9], Security);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[12], Type);
      }
      if (hasIsSuspend) {
        output.WriteBool(3, field_names[2], IsSuspend);
      }
      if (hasListTime) {
        output.WriteString(4, field_names[4], ListTime);
      }
      if (hasLotSize) {
        output.WriteInt32(5, field_names[5], LotSize);
      }
      if (hasPriceSpread) {
        output.WriteDouble(6, field_names[8], PriceSpread);
      }
      if (hasUpdateTime) {
        output.WriteString(7, field_names[13], UpdateTime);
      }
      if (hasHighPrice) {
        output.WriteDouble(8, field_names[1], HighPrice);
      }
      if (hasOpenPrice) {
        output.WriteDouble(9, field_names[7], OpenPrice);
      }
      if (hasLowPrice) {
        output.WriteDouble(10, field_names[6], LowPrice);
      }
      if (hasLastClosePrice) {
        output.WriteDouble(11, field_names[3], LastClosePrice);
      }
      if (hasCurPrice) {
        output.WriteDouble(12, field_names[0], CurPrice);
      }
      if (hasVolume) {
        output.WriteInt64(13, field_names[14], Volume);
      }
      if (hasTurnover) {
        output.WriteDouble(14, field_names[10], Turnover);
      }
      if (hasTurnoverRate) {
        output.WriteDouble(15, field_names[11], TurnoverRate);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasSecurity) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Security);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
      }
      if (hasIsSuspend) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, IsSuspend);
      }
      if (hasListTime) {
        size += pb::CodedOutputStream.ComputeStringSize(4, ListTime);
      }
      if (hasLotSize) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, LotSize);
      }
      if (hasPriceSpread) {
        size += pb::CodedOutputStream.ComputeDoubleSize(6, PriceSpread);
      }
      if (hasUpdateTime) {
        size += pb::CodedOutputStream.ComputeStringSize(7, UpdateTime);
      }
      if (hasHighPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(8, HighPrice);
      }
      if (hasOpenPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(9, OpenPrice);
      }
      if (hasLowPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(10, LowPrice);
      }
      if (hasLastClosePrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(11, LastClosePrice);
      }
      if (hasCurPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(12, CurPrice);
      }
      if (hasVolume) {
        size += pb::CodedOutputStream.ComputeInt64Size(13, Volume);
      }
      if (hasTurnover) {
        size += pb::CodedOutputStream.ComputeDoubleSize(14, Turnover);
      }
      if (hasTurnoverRate) {
        size += pb::CodedOutputStream.ComputeDoubleSize(15, TurnoverRate);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SnapshotBasicData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotBasicData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotBasicData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotBasicData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotBasicData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotBasicData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SnapshotBasicData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SnapshotBasicData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SnapshotBasicData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotBasicData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SnapshotBasicData MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SnapshotBasicData prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SnapshotBasicData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SnapshotBasicData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private SnapshotBasicData result;

      private SnapshotBasicData PrepareBuilder() {
        if (resultIsReadOnly) {
          SnapshotBasicData original = result;
          result = new SnapshotBasicData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override SnapshotBasicData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetSecuritySnapshot.SnapshotBasicData.Descriptor; }
      }

      public override SnapshotBasicData DefaultInstanceForType {
        get { return global::Qot_GetSecuritySnapshot.SnapshotBasicData.DefaultInstance; }
      }

      public override SnapshotBasicData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SnapshotBasicData) {
          return MergeFrom((SnapshotBasicData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(SnapshotBasicData other) {
        if (other == global::Qot_GetSecuritySnapshot.SnapshotBasicData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSecurity) {
          MergeSecurity(other.Security);
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasIsSuspend) {
          IsSuspend = other.IsSuspend;
        }
        if (other.HasListTime) {
          ListTime = other.ListTime;
        }
        if (other.HasLotSize) {
          LotSize = other.LotSize;
        }
        if (other.HasPriceSpread) {
          PriceSpread = other.PriceSpread;
        }
        if (other.HasUpdateTime) {
          UpdateTime = other.UpdateTime;
        }
        if (other.HasHighPrice) {
          HighPrice = other.HighPrice;
        }
        if (other.HasOpenPrice) {
          OpenPrice = other.OpenPrice;
        }
        if (other.HasLowPrice) {
          LowPrice = other.LowPrice;
        }
        if (other.HasLastClosePrice) {
          LastClosePrice = other.LastClosePrice;
        }
        if (other.HasCurPrice) {
          CurPrice = other.CurPrice;
        }
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        if (other.HasTurnover) {
          Turnover = other.Turnover;
        }
        if (other.HasTurnoverRate) {
          TurnoverRate = other.TurnoverRate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotBasicDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotBasicDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Qot_Common.Security.Builder subBuilder = global::Qot_Common.Security.CreateBuilder();
              if (result.hasSecurity) {
                subBuilder.MergeFrom(Security);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Security = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 24: {
              result.hasIsSuspend = input.ReadBool(ref result.isSuspend_);
              break;
            }
            case 34: {
              result.hasListTime = input.ReadString(ref result.listTime_);
              break;
            }
            case 40: {
              result.hasLotSize = input.ReadInt32(ref result.lotSize_);
              break;
            }
            case 49: {
              result.hasPriceSpread = input.ReadDouble(ref result.priceSpread_);
              break;
            }
            case 58: {
              result.hasUpdateTime = input.ReadString(ref result.updateTime_);
              break;
            }
            case 65: {
              result.hasHighPrice = input.ReadDouble(ref result.highPrice_);
              break;
            }
            case 73: {
              result.hasOpenPrice = input.ReadDouble(ref result.openPrice_);
              break;
            }
            case 81: {
              result.hasLowPrice = input.ReadDouble(ref result.lowPrice_);
              break;
            }
            case 89: {
              result.hasLastClosePrice = input.ReadDouble(ref result.lastClosePrice_);
              break;
            }
            case 97: {
              result.hasCurPrice = input.ReadDouble(ref result.curPrice_);
              break;
            }
            case 104: {
              result.hasVolume = input.ReadInt64(ref result.volume_);
              break;
            }
            case 113: {
              result.hasTurnover = input.ReadDouble(ref result.turnover_);
              break;
            }
            case 121: {
              result.hasTurnoverRate = input.ReadDouble(ref result.turnoverRate_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasSecurity {
       get { return result.hasSecurity; }
      }
      public global::Qot_Common.Security Security {
        get { return result.Security; }
        set { SetSecurity(value); }
      }
      public Builder SetSecurity(global::Qot_Common.Security value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSecurity = true;
        result.security_ = value;
        return this;
      }
      public Builder SetSecurity(global::Qot_Common.Security.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSecurity = true;
        result.security_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSecurity(global::Qot_Common.Security value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSecurity &&
            result.security_ != global::Qot_Common.Security.DefaultInstance) {
            result.security_ = global::Qot_Common.Security.CreateBuilder(result.security_).MergeFrom(value).BuildPartial();
        } else {
          result.security_ = value;
        }
        result.hasSecurity = true;
        return this;
      }
      public Builder ClearSecurity() {
        PrepareBuilder();
        result.hasSecurity = false;
        result.security_ = null;
        return this;
      }

      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }

      public bool HasIsSuspend {
        get { return result.hasIsSuspend; }
      }
      public bool IsSuspend {
        get { return result.IsSuspend; }
        set { SetIsSuspend(value); }
      }
      public Builder SetIsSuspend(bool value) {
        PrepareBuilder();
        result.hasIsSuspend = true;
        result.isSuspend_ = value;
        return this;
      }
      public Builder ClearIsSuspend() {
        PrepareBuilder();
        result.hasIsSuspend = false;
        result.isSuspend_ = false;
        return this;
      }

      public bool HasListTime {
        get { return result.hasListTime; }
      }
      public string ListTime {
        get { return result.ListTime; }
        set { SetListTime(value); }
      }
      public Builder SetListTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasListTime = true;
        result.listTime_ = value;
        return this;
      }
      public Builder ClearListTime() {
        PrepareBuilder();
        result.hasListTime = false;
        result.listTime_ = "";
        return this;
      }

      public bool HasLotSize {
        get { return result.hasLotSize; }
      }
      public int LotSize {
        get { return result.LotSize; }
        set { SetLotSize(value); }
      }
      public Builder SetLotSize(int value) {
        PrepareBuilder();
        result.hasLotSize = true;
        result.lotSize_ = value;
        return this;
      }
      public Builder ClearLotSize() {
        PrepareBuilder();
        result.hasLotSize = false;
        result.lotSize_ = 0;
        return this;
      }

      public bool HasPriceSpread {
        get { return result.hasPriceSpread; }
      }
      public double PriceSpread {
        get { return result.PriceSpread; }
        set { SetPriceSpread(value); }
      }
      public Builder SetPriceSpread(double value) {
        PrepareBuilder();
        result.hasPriceSpread = true;
        result.priceSpread_ = value;
        return this;
      }
      public Builder ClearPriceSpread() {
        PrepareBuilder();
        result.hasPriceSpread = false;
        result.priceSpread_ = 0D;
        return this;
      }

      public bool HasUpdateTime {
        get { return result.hasUpdateTime; }
      }
      public string UpdateTime {
        get { return result.UpdateTime; }
        set { SetUpdateTime(value); }
      }
      public Builder SetUpdateTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUpdateTime = true;
        result.updateTime_ = value;
        return this;
      }
      public Builder ClearUpdateTime() {
        PrepareBuilder();
        result.hasUpdateTime = false;
        result.updateTime_ = "";
        return this;
      }

      public bool HasHighPrice {
        get { return result.hasHighPrice; }
      }
      public double HighPrice {
        get { return result.HighPrice; }
        set { SetHighPrice(value); }
      }
      public Builder SetHighPrice(double value) {
        PrepareBuilder();
        result.hasHighPrice = true;
        result.highPrice_ = value;
        return this;
      }
      public Builder ClearHighPrice() {
        PrepareBuilder();
        result.hasHighPrice = false;
        result.highPrice_ = 0D;
        return this;
      }

      public bool HasOpenPrice {
        get { return result.hasOpenPrice; }
      }
      public double OpenPrice {
        get { return result.OpenPrice; }
        set { SetOpenPrice(value); }
      }
      public Builder SetOpenPrice(double value) {
        PrepareBuilder();
        result.hasOpenPrice = true;
        result.openPrice_ = value;
        return this;
      }
      public Builder ClearOpenPrice() {
        PrepareBuilder();
        result.hasOpenPrice = false;
        result.openPrice_ = 0D;
        return this;
      }

      public bool HasLowPrice {
        get { return result.hasLowPrice; }
      }
      public double LowPrice {
        get { return result.LowPrice; }
        set { SetLowPrice(value); }
      }
      public Builder SetLowPrice(double value) {
        PrepareBuilder();
        result.hasLowPrice = true;
        result.lowPrice_ = value;
        return this;
      }
      public Builder ClearLowPrice() {
        PrepareBuilder();
        result.hasLowPrice = false;
        result.lowPrice_ = 0D;
        return this;
      }

      public bool HasLastClosePrice {
        get { return result.hasLastClosePrice; }
      }
      public double LastClosePrice {
        get { return result.LastClosePrice; }
        set { SetLastClosePrice(value); }
      }
      public Builder SetLastClosePrice(double value) {
        PrepareBuilder();
        result.hasLastClosePrice = true;
        result.lastClosePrice_ = value;
        return this;
      }
      public Builder ClearLastClosePrice() {
        PrepareBuilder();
        result.hasLastClosePrice = false;
        result.lastClosePrice_ = 0D;
        return this;
      }

      public bool HasCurPrice {
        get { return result.hasCurPrice; }
      }
      public double CurPrice {
        get { return result.CurPrice; }
        set { SetCurPrice(value); }
      }
      public Builder SetCurPrice(double value) {
        PrepareBuilder();
        result.hasCurPrice = true;
        result.curPrice_ = value;
        return this;
      }
      public Builder ClearCurPrice() {
        PrepareBuilder();
        result.hasCurPrice = false;
        result.curPrice_ = 0D;
        return this;
      }

      public bool HasVolume {
        get { return result.hasVolume; }
      }
      public long Volume {
        get { return result.Volume; }
        set { SetVolume(value); }
      }
      public Builder SetVolume(long value) {
        PrepareBuilder();
        result.hasVolume = true;
        result.volume_ = value;
        return this;
      }
      public Builder ClearVolume() {
        PrepareBuilder();
        result.hasVolume = false;
        result.volume_ = 0L;
        return this;
      }

      public bool HasTurnover {
        get { return result.hasTurnover; }
      }
      public double Turnover {
        get { return result.Turnover; }
        set { SetTurnover(value); }
      }
      public Builder SetTurnover(double value) {
        PrepareBuilder();
        result.hasTurnover = true;
        result.turnover_ = value;
        return this;
      }
      public Builder ClearTurnover() {
        PrepareBuilder();
        result.hasTurnover = false;
        result.turnover_ = 0D;
        return this;
      }

      public bool HasTurnoverRate {
        get { return result.hasTurnoverRate; }
      }
      public double TurnoverRate {
        get { return result.TurnoverRate; }
        set { SetTurnoverRate(value); }
      }
      public Builder SetTurnoverRate(double value) {
        PrepareBuilder();
        result.hasTurnoverRate = true;
        result.turnoverRate_ = value;
        return this;
      }
      public Builder ClearTurnoverRate() {
        PrepareBuilder();
        result.hasTurnoverRate = false;
        result.turnoverRate_ = 0D;
        return this;
      }
    }
    static SnapshotBasicData() {
      object.ReferenceEquals(global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Snapshot : pb::GeneratedMessage<Snapshot, Snapshot.Builder> {
    private Snapshot() { }
    private static readonly Snapshot defaultInstance = new Snapshot().MakeReadOnly();
    private static readonly string[] _snapshotFieldNames = new string[] { "basic", "equityExData", "optionExData", "warrantExData" };
    private static readonly uint[] _snapshotFieldTags = new uint[] { 10, 18, 34, 26 };
    public static Snapshot DefaultInstance {
      get { return defaultInstance; }
    }

    public override Snapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Snapshot ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_Snapshot__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Snapshot, Snapshot.Builder> InternalFieldAccessors {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_Snapshot__FieldAccessorTable; }
    }

    public const int BasicFieldNumber = 1;
    private bool hasBasic;
    private global::Qot_GetSecuritySnapshot.SnapshotBasicData basic_;
    public bool HasBasic {
      get { return hasBasic; }
    }
    public global::Qot_GetSecuritySnapshot.SnapshotBasicData Basic {
      get { return basic_ ?? global::Qot_GetSecuritySnapshot.SnapshotBasicData.DefaultInstance; }
    }

    public const int EquityExDataFieldNumber = 2;
    private bool hasEquityExData;
    private global::Qot_GetSecuritySnapshot.EquitySnapshotExData equityExData_;
    public bool HasEquityExData {
      get { return hasEquityExData; }
    }
    public global::Qot_GetSecuritySnapshot.EquitySnapshotExData EquityExData {
      get { return equityExData_ ?? global::Qot_GetSecuritySnapshot.EquitySnapshotExData.DefaultInstance; }
    }

    public const int WarrantExDataFieldNumber = 3;
    private bool hasWarrantExData;
    private global::Qot_GetSecuritySnapshot.WarrantSnapshotExData warrantExData_;
    public bool HasWarrantExData {
      get { return hasWarrantExData; }
    }
    public global::Qot_GetSecuritySnapshot.WarrantSnapshotExData WarrantExData {
      get { return warrantExData_ ?? global::Qot_GetSecuritySnapshot.WarrantSnapshotExData.DefaultInstance; }
    }

    public const int OptionExDataFieldNumber = 4;
    private bool hasOptionExData;
    private global::Qot_GetSecuritySnapshot.OptionSnapshotExData optionExData_;
    public bool HasOptionExData {
      get { return hasOptionExData; }
    }
    public global::Qot_GetSecuritySnapshot.OptionSnapshotExData OptionExData {
      get { return optionExData_ ?? global::Qot_GetSecuritySnapshot.OptionSnapshotExData.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (!hasBasic) return false;
        if (!Basic.IsInitialized) return false;
        if (HasEquityExData) {
          if (!EquityExData.IsInitialized) return false;
        }
        if (HasWarrantExData) {
          if (!WarrantExData.IsInitialized) return false;
        }
        if (HasOptionExData) {
          if (!OptionExData.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _snapshotFieldNames;
      if (hasBasic) {
        output.WriteMessage(1, field_names[0], Basic);
      }
      if (hasEquityExData) {
        output.WriteMessage(2, field_names[1], EquityExData);
      }
      if (hasWarrantExData) {
        output.WriteMessage(3, field_names[3], WarrantExData);
      }
      if (hasOptionExData) {
        output.WriteMessage(4, field_names[2], OptionExData);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasBasic) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Basic);
      }
      if (hasEquityExData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, EquityExData);
      }
      if (hasWarrantExData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, WarrantExData);
      }
      if (hasOptionExData) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, OptionExData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Snapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Snapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Snapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Snapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Snapshot MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Snapshot prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Snapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Snapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Snapshot result;

      private Snapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          Snapshot original = result;
          result = new Snapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Snapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetSecuritySnapshot.Snapshot.Descriptor; }
      }

      public override Snapshot DefaultInstanceForType {
        get { return global::Qot_GetSecuritySnapshot.Snapshot.DefaultInstance; }
      }

      public override Snapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Snapshot) {
          return MergeFrom((Snapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Snapshot other) {
        if (other == global::Qot_GetSecuritySnapshot.Snapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBasic) {
          MergeBasic(other.Basic);
        }
        if (other.HasEquityExData) {
          MergeEquityExData(other.EquityExData);
        }
        if (other.HasWarrantExData) {
          MergeWarrantExData(other.WarrantExData);
        }
        if (other.HasOptionExData) {
          MergeOptionExData(other.OptionExData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Qot_GetSecuritySnapshot.SnapshotBasicData.Builder subBuilder = global::Qot_GetSecuritySnapshot.SnapshotBasicData.CreateBuilder();
              if (result.hasBasic) {
                subBuilder.MergeFrom(Basic);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Basic = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Qot_GetSecuritySnapshot.EquitySnapshotExData.Builder subBuilder = global::Qot_GetSecuritySnapshot.EquitySnapshotExData.CreateBuilder();
              if (result.hasEquityExData) {
                subBuilder.MergeFrom(EquityExData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EquityExData = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Qot_GetSecuritySnapshot.WarrantSnapshotExData.Builder subBuilder = global::Qot_GetSecuritySnapshot.WarrantSnapshotExData.CreateBuilder();
              if (result.hasWarrantExData) {
                subBuilder.MergeFrom(WarrantExData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              WarrantExData = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Qot_GetSecuritySnapshot.OptionSnapshotExData.Builder subBuilder = global::Qot_GetSecuritySnapshot.OptionSnapshotExData.CreateBuilder();
              if (result.hasOptionExData) {
                subBuilder.MergeFrom(OptionExData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OptionExData = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasBasic {
       get { return result.hasBasic; }
      }
      public global::Qot_GetSecuritySnapshot.SnapshotBasicData Basic {
        get { return result.Basic; }
        set { SetBasic(value); }
      }
      public Builder SetBasic(global::Qot_GetSecuritySnapshot.SnapshotBasicData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBasic = true;
        result.basic_ = value;
        return this;
      }
      public Builder SetBasic(global::Qot_GetSecuritySnapshot.SnapshotBasicData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBasic = true;
        result.basic_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBasic(global::Qot_GetSecuritySnapshot.SnapshotBasicData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBasic &&
            result.basic_ != global::Qot_GetSecuritySnapshot.SnapshotBasicData.DefaultInstance) {
            result.basic_ = global::Qot_GetSecuritySnapshot.SnapshotBasicData.CreateBuilder(result.basic_).MergeFrom(value).BuildPartial();
        } else {
          result.basic_ = value;
        }
        result.hasBasic = true;
        return this;
      }
      public Builder ClearBasic() {
        PrepareBuilder();
        result.hasBasic = false;
        result.basic_ = null;
        return this;
      }

      public bool HasEquityExData {
       get { return result.hasEquityExData; }
      }
      public global::Qot_GetSecuritySnapshot.EquitySnapshotExData EquityExData {
        get { return result.EquityExData; }
        set { SetEquityExData(value); }
      }
      public Builder SetEquityExData(global::Qot_GetSecuritySnapshot.EquitySnapshotExData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEquityExData = true;
        result.equityExData_ = value;
        return this;
      }
      public Builder SetEquityExData(global::Qot_GetSecuritySnapshot.EquitySnapshotExData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEquityExData = true;
        result.equityExData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEquityExData(global::Qot_GetSecuritySnapshot.EquitySnapshotExData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEquityExData &&
            result.equityExData_ != global::Qot_GetSecuritySnapshot.EquitySnapshotExData.DefaultInstance) {
            result.equityExData_ = global::Qot_GetSecuritySnapshot.EquitySnapshotExData.CreateBuilder(result.equityExData_).MergeFrom(value).BuildPartial();
        } else {
          result.equityExData_ = value;
        }
        result.hasEquityExData = true;
        return this;
      }
      public Builder ClearEquityExData() {
        PrepareBuilder();
        result.hasEquityExData = false;
        result.equityExData_ = null;
        return this;
      }

      public bool HasWarrantExData {
       get { return result.hasWarrantExData; }
      }
      public global::Qot_GetSecuritySnapshot.WarrantSnapshotExData WarrantExData {
        get { return result.WarrantExData; }
        set { SetWarrantExData(value); }
      }
      public Builder SetWarrantExData(global::Qot_GetSecuritySnapshot.WarrantSnapshotExData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWarrantExData = true;
        result.warrantExData_ = value;
        return this;
      }
      public Builder SetWarrantExData(global::Qot_GetSecuritySnapshot.WarrantSnapshotExData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWarrantExData = true;
        result.warrantExData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWarrantExData(global::Qot_GetSecuritySnapshot.WarrantSnapshotExData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWarrantExData &&
            result.warrantExData_ != global::Qot_GetSecuritySnapshot.WarrantSnapshotExData.DefaultInstance) {
            result.warrantExData_ = global::Qot_GetSecuritySnapshot.WarrantSnapshotExData.CreateBuilder(result.warrantExData_).MergeFrom(value).BuildPartial();
        } else {
          result.warrantExData_ = value;
        }
        result.hasWarrantExData = true;
        return this;
      }
      public Builder ClearWarrantExData() {
        PrepareBuilder();
        result.hasWarrantExData = false;
        result.warrantExData_ = null;
        return this;
      }

      public bool HasOptionExData {
       get { return result.hasOptionExData; }
      }
      public global::Qot_GetSecuritySnapshot.OptionSnapshotExData OptionExData {
        get { return result.OptionExData; }
        set { SetOptionExData(value); }
      }
      public Builder SetOptionExData(global::Qot_GetSecuritySnapshot.OptionSnapshotExData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOptionExData = true;
        result.optionExData_ = value;
        return this;
      }
      public Builder SetOptionExData(global::Qot_GetSecuritySnapshot.OptionSnapshotExData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOptionExData = true;
        result.optionExData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOptionExData(global::Qot_GetSecuritySnapshot.OptionSnapshotExData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOptionExData &&
            result.optionExData_ != global::Qot_GetSecuritySnapshot.OptionSnapshotExData.DefaultInstance) {
            result.optionExData_ = global::Qot_GetSecuritySnapshot.OptionSnapshotExData.CreateBuilder(result.optionExData_).MergeFrom(value).BuildPartial();
        } else {
          result.optionExData_ = value;
        }
        result.hasOptionExData = true;
        return this;
      }
      public Builder ClearOptionExData() {
        PrepareBuilder();
        result.hasOptionExData = false;
        result.optionExData_ = null;
        return this;
      }
    }
    static Snapshot() {
      object.ReferenceEquals(global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2C : pb::GeneratedMessage<S2C, S2C.Builder> {
    private S2C() { }
    private static readonly S2C defaultInstance = new S2C().MakeReadOnly();
    private static readonly string[] _s2CFieldNames = new string[] { "snapshotList" };
    private static readonly uint[] _s2CFieldTags = new uint[] { 10 };
    public static S2C DefaultInstance {
      get { return defaultInstance; }
    }

    public override S2C DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override S2C ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_S2C__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<S2C, S2C.Builder> InternalFieldAccessors {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_S2C__FieldAccessorTable; }
    }

    public const int SnapshotListFieldNumber = 1;
    private pbc::PopsicleList<global::Qot_GetSecuritySnapshot.Snapshot> snapshotList_ = new pbc::PopsicleList<global::Qot_GetSecuritySnapshot.Snapshot>();
    public scg::IList<global::Qot_GetSecuritySnapshot.Snapshot> SnapshotListList {
      get { return snapshotList_; }
    }
    public int SnapshotListCount {
      get { return snapshotList_.Count; }
    }
    public global::Qot_GetSecuritySnapshot.Snapshot GetSnapshotList(int index) {
      return snapshotList_[index];
    }

    public override bool IsInitialized {
      get {
        foreach (global::Qot_GetSecuritySnapshot.Snapshot element in SnapshotListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CFieldNames;
      if (snapshotList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], snapshotList_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      foreach (global::Qot_GetSecuritySnapshot.Snapshot element in SnapshotListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2C MakeReadOnly() {
      snapshotList_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2C prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private S2C result;

      private S2C PrepareBuilder() {
        if (resultIsReadOnly) {
          S2C original = result;
          result = new S2C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override S2C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetSecuritySnapshot.S2C.Descriptor; }
      }

      public override S2C DefaultInstanceForType {
        get { return global::Qot_GetSecuritySnapshot.S2C.DefaultInstance; }
      }

      public override S2C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2C) {
          return MergeFrom((S2C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(S2C other) {
        if (other == global::Qot_GetSecuritySnapshot.S2C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.snapshotList_.Count != 0) {
          result.snapshotList_.Add(other.snapshotList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.snapshotList_, global::Qot_GetSecuritySnapshot.Snapshot.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public pbc::IPopsicleList<global::Qot_GetSecuritySnapshot.Snapshot> SnapshotListList {
        get { return PrepareBuilder().snapshotList_; }
      }
      public int SnapshotListCount {
        get { return result.SnapshotListCount; }
      }
      public global::Qot_GetSecuritySnapshot.Snapshot GetSnapshotList(int index) {
        return result.GetSnapshotList(index);
      }
      public Builder SetSnapshotList(int index, global::Qot_GetSecuritySnapshot.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.snapshotList_[index] = value;
        return this;
      }
      public Builder SetSnapshotList(int index, global::Qot_GetSecuritySnapshot.Snapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.snapshotList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSnapshotList(global::Qot_GetSecuritySnapshot.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.snapshotList_.Add(value);
        return this;
      }
      public Builder AddSnapshotList(global::Qot_GetSecuritySnapshot.Snapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.snapshotList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSnapshotList(scg::IEnumerable<global::Qot_GetSecuritySnapshot.Snapshot> values) {
        PrepareBuilder();
        result.snapshotList_.Add(values);
        return this;
      }
      public Builder ClearSnapshotList() {
        PrepareBuilder();
        result.snapshotList_.Clear();
        return this;
      }
    }
    static S2C() {
      object.ReferenceEquals(global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
    private Request() { }
    private static readonly Request defaultInstance = new Request().MakeReadOnly();
    private static readonly string[] _requestFieldNames = new string[] { "c2s" };
    private static readonly uint[] _requestFieldTags = new uint[] { 10 };
    public static Request DefaultInstance {
      get { return defaultInstance; }
    }

    public override Request DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Request ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_Request__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_Request__FieldAccessorTable; }
    }

    public const int C2SFieldNumber = 1;
    private bool hasC2S;
    private global::Qot_GetSecuritySnapshot.C2S c2S_;
    public bool HasC2S {
      get { return hasC2S; }
    }
    public global::Qot_GetSecuritySnapshot.C2S C2S {
      get { return c2S_ ?? global::Qot_GetSecuritySnapshot.C2S.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (!hasC2S) return false;
        if (!C2S.IsInitialized) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _requestFieldNames;
      if (hasC2S) {
        output.WriteMessage(1, field_names[0], C2S);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasC2S) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, C2S);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Request ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Request ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Request ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Request ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Request MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Request prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Request cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Request result;

      private Request PrepareBuilder() {
        if (resultIsReadOnly) {
          Request original = result;
          result = new Request();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Request MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetSecuritySnapshot.Request.Descriptor; }
      }

      public override Request DefaultInstanceForType {
        get { return global::Qot_GetSecuritySnapshot.Request.DefaultInstance; }
      }

      public override Request BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Request) {
          return MergeFrom((Request) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Request other) {
        if (other == global::Qot_GetSecuritySnapshot.Request.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasC2S) {
          MergeC2S(other.C2S);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Qot_GetSecuritySnapshot.C2S.Builder subBuilder = global::Qot_GetSecuritySnapshot.C2S.CreateBuilder();
              if (result.hasC2S) {
                subBuilder.MergeFrom(C2S);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              C2S = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasC2S {
       get { return result.hasC2S; }
      }
      public global::Qot_GetSecuritySnapshot.C2S C2S {
        get { return result.C2S; }
        set { SetC2S(value); }
      }
      public Builder SetC2S(global::Qot_GetSecuritySnapshot.C2S value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasC2S = true;
        result.c2S_ = value;
        return this;
      }
      public Builder SetC2S(global::Qot_GetSecuritySnapshot.C2S.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasC2S = true;
        result.c2S_ = builderForValue.Build();
        return this;
      }
      public Builder MergeC2S(global::Qot_GetSecuritySnapshot.C2S value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasC2S &&
            result.c2S_ != global::Qot_GetSecuritySnapshot.C2S.DefaultInstance) {
            result.c2S_ = global::Qot_GetSecuritySnapshot.C2S.CreateBuilder(result.c2S_).MergeFrom(value).BuildPartial();
        } else {
          result.c2S_ = value;
        }
        result.hasC2S = true;
        return this;
      }
      public Builder ClearC2S() {
        PrepareBuilder();
        result.hasC2S = false;
        result.c2S_ = null;
        return this;
      }
    }
    static Request() {
      object.ReferenceEquals(global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
    private Response() { }
    private static readonly Response defaultInstance = new Response().MakeReadOnly();
    private static readonly string[] _responseFieldNames = new string[] { "errCode", "retMsg", "retType", "s2c" };
    private static readonly uint[] _responseFieldTags = new uint[] { 24, 18, 8, 34 };
    public static Response DefaultInstance {
      get { return defaultInstance; }
    }

    public override Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Response ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_Response__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
      get { return global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_Response__FieldAccessorTable; }
    }

    public const int RetTypeFieldNumber = 1;
    private bool hasRetType;
    private int retType_ = -400;
    public bool HasRetType {
      get { return hasRetType; }
    }
    public int RetType {
      get { return retType_; }
    }

    public const int RetMsgFieldNumber = 2;
    private bool hasRetMsg;
    private string retMsg_ = "";
    public bool HasRetMsg {
      get { return hasRetMsg; }
    }
    public string RetMsg {
      get { return retMsg_; }
    }

    public const int ErrCodeFieldNumber = 3;
    private bool hasErrCode;
    private int errCode_;
    public bool HasErrCode {
      get { return hasErrCode; }
    }
    public int ErrCode {
      get { return errCode_; }
    }

    public const int S2CFieldNumber = 4;
    private bool hasS2C;
    private global::Qot_GetSecuritySnapshot.S2C s2C_;
    public bool HasS2C {
      get { return hasS2C; }
    }
    public global::Qot_GetSecuritySnapshot.S2C S2C {
      get { return s2C_ ?? global::Qot_GetSecuritySnapshot.S2C.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (!hasRetType) return false;
        if (HasS2C) {
          if (!S2C.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _responseFieldNames;
      if (hasRetType) {
        output.WriteInt32(1, field_names[2], RetType);
      }
      if (hasRetMsg) {
        output.WriteString(2, field_names[1], RetMsg);
      }
      if (hasErrCode) {
        output.WriteInt32(3, field_names[0], ErrCode);
      }
      if (hasS2C) {
        output.WriteMessage(4, field_names[3], S2C);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasRetType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, RetType);
      }
      if (hasRetMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(2, RetMsg);
      }
      if (hasErrCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, ErrCode);
      }
      if (hasS2C) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, S2C);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Response MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Response prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Response result;

      private Response PrepareBuilder() {
        if (resultIsReadOnly) {
          Response original = result;
          result = new Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetSecuritySnapshot.Response.Descriptor; }
      }

      public override Response DefaultInstanceForType {
        get { return global::Qot_GetSecuritySnapshot.Response.DefaultInstance; }
      }

      public override Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Response) {
          return MergeFrom((Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Response other) {
        if (other == global::Qot_GetSecuritySnapshot.Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRetType) {
          RetType = other.RetType;
        }
        if (other.HasRetMsg) {
          RetMsg = other.RetMsg;
        }
        if (other.HasErrCode) {
          ErrCode = other.ErrCode;
        }
        if (other.HasS2C) {
          MergeS2C(other.S2C);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _responseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRetType = input.ReadInt32(ref result.retType_);
              break;
            }
            case 18: {
              result.hasRetMsg = input.ReadString(ref result.retMsg_);
              break;
            }
            case 24: {
              result.hasErrCode = input.ReadInt32(ref result.errCode_);
              break;
            }
            case 34: {
              global::Qot_GetSecuritySnapshot.S2C.Builder subBuilder = global::Qot_GetSecuritySnapshot.S2C.CreateBuilder();
              if (result.hasS2C) {
                subBuilder.MergeFrom(S2C);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              S2C = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasRetType {
        get { return result.hasRetType; }
      }
      public int RetType {
        get { return result.RetType; }
        set { SetRetType(value); }
      }
      public Builder SetRetType(int value) {
        PrepareBuilder();
        result.hasRetType = true;
        result.retType_ = value;
        return this;
      }
      public Builder ClearRetType() {
        PrepareBuilder();
        result.hasRetType = false;
        result.retType_ = -400;
        return this;
      }

      public bool HasRetMsg {
        get { return result.hasRetMsg; }
      }
      public string RetMsg {
        get { return result.RetMsg; }
        set { SetRetMsg(value); }
      }
      public Builder SetRetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRetMsg = true;
        result.retMsg_ = value;
        return this;
      }
      public Builder ClearRetMsg() {
        PrepareBuilder();
        result.hasRetMsg = false;
        result.retMsg_ = "";
        return this;
      }

      public bool HasErrCode {
        get { return result.hasErrCode; }
      }
      public int ErrCode {
        get { return result.ErrCode; }
        set { SetErrCode(value); }
      }
      public Builder SetErrCode(int value) {
        PrepareBuilder();
        result.hasErrCode = true;
        result.errCode_ = value;
        return this;
      }
      public Builder ClearErrCode() {
        PrepareBuilder();
        result.hasErrCode = false;
        result.errCode_ = 0;
        return this;
      }

      public bool HasS2C {
       get { return result.hasS2C; }
      }
      public global::Qot_GetSecuritySnapshot.S2C S2C {
        get { return result.S2C; }
        set { SetS2C(value); }
      }
      public Builder SetS2C(global::Qot_GetSecuritySnapshot.S2C value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasS2C = true;
        result.s2C_ = value;
        return this;
      }
      public Builder SetS2C(global::Qot_GetSecuritySnapshot.S2C.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasS2C = true;
        result.s2C_ = builderForValue.Build();
        return this;
      }
      public Builder MergeS2C(global::Qot_GetSecuritySnapshot.S2C value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasS2C &&
            result.s2C_ != global::Qot_GetSecuritySnapshot.S2C.DefaultInstance) {
            result.s2C_ = global::Qot_GetSecuritySnapshot.S2C.CreateBuilder(result.s2C_).MergeFrom(value).BuildPartial();
        } else {
          result.s2C_ = value;
        }
        result.hasS2C = true;
        return this;
      }
      public Builder ClearS2C() {
        PrepareBuilder();
        result.hasS2C = false;
        result.s2C_ = null;
        return this;
      }
    }
    static Response() {
      object.ReferenceEquals(global::Qot_GetSecuritySnapshot.QotGetSecuritySnapshot.Descriptor, null);
    }
  }

  #endregion

}

#endregion Designer generated code
