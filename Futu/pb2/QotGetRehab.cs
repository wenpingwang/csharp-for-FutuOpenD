// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Qot_GetRehab.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Qot_GetRehab {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class QotGetRehab {

    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Qot_GetRehab_C2S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetRehab.C2S, global::Qot_GetRehab.C2S.Builder> internal__static_Qot_GetRehab_C2S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetRehab_Rehab__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetRehab.Rehab, global::Qot_GetRehab.Rehab.Builder> internal__static_Qot_GetRehab_Rehab__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetRehab_SecurityRehab__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetRehab.SecurityRehab, global::Qot_GetRehab.SecurityRehab.Builder> internal__static_Qot_GetRehab_SecurityRehab__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetRehab_S2C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetRehab.S2C, global::Qot_GetRehab.S2C.Builder> internal__static_Qot_GetRehab_S2C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetRehab_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetRehab.Request, global::Qot_GetRehab.Request.Builder> internal__static_Qot_GetRehab_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Qot_GetRehab_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qot_GetRehab.Response, global::Qot_GetRehab.Response.Builder> internal__static_Qot_GetRehab_Response__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;

    static QotGetRehab() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJRb3RfR2V0UmVoYWIucHJvdG8SDFFvdF9HZXRSZWhhYhoMQ29tbW9uLnBy", 
            "b3RvGhBRb3RfQ29tbW9uLnByb3RvIjEKA0MyUxIqCgxzZWN1cml0eUxpc3QY", 
            "ASADKAsyFC5Rb3RfQ29tbW9uLlNlY3VyaXR5IqcDCgVSZWhhYhIMCgR0aW1l", 
            "GAEgAigJEhYKDmNvbXBhbnlBY3RGbGFnGAIgAigDEhIKCmZ3ZEZhY3RvckEY", 
            "AyACKAESEgoKZndkRmFjdG9yQhgEIAIoARISCgpid2RGYWN0b3JBGAUgAigB", 
            "EhIKCmJ3ZEZhY3RvckIYBiACKAESEQoJc3BsaXRCYXNlGAcgASgFEhAKCHNw", 
            "bGl0RXJ0GAggASgFEhAKCGpvaW5CYXNlGAkgASgFEg8KB2pvaW5FcnQYCiAB", 
            "KAUSEQoJYm9udXNCYXNlGAsgASgFEhAKCGJvbnVzRXJ0GAwgASgFEhQKDHRy", 
            "YW5zZmVyQmFzZRgNIAEoBRITCgt0cmFuc2ZlckVydBgOIAEoBRIRCglhbGxv", 
            "dEJhc2UYDyABKAUSEAoIYWxsb3RFcnQYECABKAUSEgoKYWxsb3RQcmljZRgR", 
            "IAEoARIPCgdhZGRCYXNlGBIgASgFEg4KBmFkZEVydBgTIAEoBRIQCghhZGRQ", 
            "cmljZRgUIAEoARIQCghkaXZpZGVuZBgVIAEoARISCgpzcERpdmlkZW5kGBYg", 
            "ASgBIl8KDVNlY3VyaXR5UmVoYWISJgoIc2VjdXJpdHkYASACKAsyFC5Rb3Rf", 
            "Q29tbW9uLlNlY3VyaXR5EiYKCXJlaGFiTGlzdBgCIAMoCzITLlFvdF9HZXRS", 
            "ZWhhYi5SZWhhYiI9CgNTMkMSNgoRc2VjdXJpdHlSZWhhYkxpc3QYASADKAsy", 
            "Gy5Rb3RfR2V0UmVoYWIuU2VjdXJpdHlSZWhhYiIpCgdSZXF1ZXN0Eh4KA2My", 
            "cxgBIAIoCzIRLlFvdF9HZXRSZWhhYi5DMlMiYgoIUmVzcG9uc2USFQoHcmV0", 
            "VHlwZRgBIAIoBToELTQwMBIOCgZyZXRNc2cYAiABKAkSDwoHZXJyQ29kZRgD", 
            "IAEoBRIeCgNzMmMYBCABKAsyES5Rb3RfR2V0UmVoYWIuUzJDKtoBCgpDb21w", 
            "YW55QWN0EhMKD0NvbXBhbnlBY3RfTm9uZRAAEhQKEENvbXBhbnlBY3RfU3Bs", 
            "aXQQARITCg9Db21wYW55QWN0X0pvaW4QAhIUChBDb21wYW55QWN0X0JvbnVz", 
            "EAQSFwoTQ29tcGFueUFjdF9UcmFuc2ZlchAIEhQKEENvbXBhbnlBY3RfQWxs", 
            "b3QQEBISCg5Db21wYW55QWN0X0FkZBAgEhcKE0NvbXBhbnlBY3RfRGl2aWRl", 
          "bmQQQBIaChVDb21wYW55QWN0X1NQRGl2aWRlbmQQgAE="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Qot_GetRehab_C2S__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Qot_GetRehab_C2S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetRehab.C2S, global::Qot_GetRehab.C2S.Builder>(internal__static_Qot_GetRehab_C2S__Descriptor,
                new string[] { "SecurityList", });
        internal__static_Qot_GetRehab_Rehab__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Qot_GetRehab_Rehab__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetRehab.Rehab, global::Qot_GetRehab.Rehab.Builder>(internal__static_Qot_GetRehab_Rehab__Descriptor,
                new string[] { "Time", "CompanyActFlag", "FwdFactorA", "FwdFactorB", "BwdFactorA", "BwdFactorB", "SplitBase", "SplitErt", "JoinBase", "JoinErt", "BonusBase", "BonusErt", "TransferBase", "TransferErt", "AllotBase", "AllotErt", "AllotPrice", "AddBase", "AddErt", "AddPrice", "Dividend", "SpDividend", });
        internal__static_Qot_GetRehab_SecurityRehab__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Qot_GetRehab_SecurityRehab__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetRehab.SecurityRehab, global::Qot_GetRehab.SecurityRehab.Builder>(internal__static_Qot_GetRehab_SecurityRehab__Descriptor,
                new string[] { "Security", "RehabList", });
        internal__static_Qot_GetRehab_S2C__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Qot_GetRehab_S2C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetRehab.S2C, global::Qot_GetRehab.S2C.Builder>(internal__static_Qot_GetRehab_S2C__Descriptor,
                new string[] { "SecurityRehabList", });
        internal__static_Qot_GetRehab_Request__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Qot_GetRehab_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetRehab.Request, global::Qot_GetRehab.Request.Builder>(internal__static_Qot_GetRehab_Request__Descriptor,
                new string[] { "C2S", });
        internal__static_Qot_GetRehab_Response__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Qot_GetRehab_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qot_GetRehab.Response, global::Qot_GetRehab.Response.Builder>(internal__static_Qot_GetRehab_Response__Descriptor,
                new string[] { "RetType", "RetMsg", "ErrCode", "S2C", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Common.Common.RegisterAllExtensions(registry);
        global::Qot_Common.QotCommon.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Common.Common.Descriptor, 
          global::Qot_Common.QotCommon.Descriptor, 
          }, assigner);
    }
    #endregion

  }
  #region Enums
  public enum CompanyAct {
    CompanyAct_None = 0,
    CompanyAct_Split = 1,
    CompanyAct_Join = 2,
    CompanyAct_Bonus = 4,
    CompanyAct_Transfer = 8,
    CompanyAct_Allot = 16,
    CompanyAct_Add = 32,
    CompanyAct_Dividend = 64,
    CompanyAct_SPDividend = 128,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2S : pb::GeneratedMessage<C2S, C2S.Builder> {
    private C2S() { }
    private static readonly C2S defaultInstance = new C2S().MakeReadOnly();
    private static readonly string[] _c2SFieldNames = new string[] { "securityList" };
    private static readonly uint[] _c2SFieldTags = new uint[] { 10 };
    public static C2S DefaultInstance {
      get { return defaultInstance; }
    }

    public override C2S DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override C2S ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetRehab.QotGetRehab.internal__static_Qot_GetRehab_C2S__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<C2S, C2S.Builder> InternalFieldAccessors {
      get { return global::Qot_GetRehab.QotGetRehab.internal__static_Qot_GetRehab_C2S__FieldAccessorTable; }
    }

    public const int SecurityListFieldNumber = 1;
    private pbc::PopsicleList<global::Qot_Common.Security> securityList_ = new pbc::PopsicleList<global::Qot_Common.Security>();
    public scg::IList<global::Qot_Common.Security> SecurityListList {
      get { return securityList_; }
    }
    public int SecurityListCount {
      get { return securityList_.Count; }
    }
    public global::Qot_Common.Security GetSecurityList(int index) {
      return securityList_[index];
    }

    public override bool IsInitialized {
      get {
        foreach (global::Qot_Common.Security element in SecurityListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SFieldNames;
      if (securityList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], securityList_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      foreach (global::Qot_Common.Security element in SecurityListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2S MakeReadOnly() {
      securityList_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2S prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private C2S result;

      private C2S PrepareBuilder() {
        if (resultIsReadOnly) {
          C2S original = result;
          result = new C2S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override C2S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetRehab.C2S.Descriptor; }
      }

      public override C2S DefaultInstanceForType {
        get { return global::Qot_GetRehab.C2S.DefaultInstance; }
      }

      public override C2S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2S) {
          return MergeFrom((C2S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(C2S other) {
        if (other == global::Qot_GetRehab.C2S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.securityList_.Count != 0) {
          result.securityList_.Add(other.securityList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.securityList_, global::Qot_Common.Security.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public pbc::IPopsicleList<global::Qot_Common.Security> SecurityListList {
        get { return PrepareBuilder().securityList_; }
      }
      public int SecurityListCount {
        get { return result.SecurityListCount; }
      }
      public global::Qot_Common.Security GetSecurityList(int index) {
        return result.GetSecurityList(index);
      }
      public Builder SetSecurityList(int index, global::Qot_Common.Security value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.securityList_[index] = value;
        return this;
      }
      public Builder SetSecurityList(int index, global::Qot_Common.Security.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.securityList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSecurityList(global::Qot_Common.Security value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.securityList_.Add(value);
        return this;
      }
      public Builder AddSecurityList(global::Qot_Common.Security.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.securityList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSecurityList(scg::IEnumerable<global::Qot_Common.Security> values) {
        PrepareBuilder();
        result.securityList_.Add(values);
        return this;
      }
      public Builder ClearSecurityList() {
        PrepareBuilder();
        result.securityList_.Clear();
        return this;
      }
    }
    static C2S() {
      object.ReferenceEquals(global::Qot_GetRehab.QotGetRehab.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Rehab : pb::GeneratedMessage<Rehab, Rehab.Builder> {
    private Rehab() { }
    private static readonly Rehab defaultInstance = new Rehab().MakeReadOnly();
    private static readonly string[] _rehabFieldNames = new string[] { "addBase", "addErt", "addPrice", "allotBase", "allotErt", "allotPrice", "bonusBase", "bonusErt", "bwdFactorA", "bwdFactorB", "companyActFlag", "dividend", "fwdFactorA", "fwdFactorB", "joinBase", "joinErt", "spDividend", "splitBase", "splitErt", "time", "transferBase", "transferErt" };
    private static readonly uint[] _rehabFieldTags = new uint[] { 144, 152, 161, 120, 128, 137, 88, 96, 41, 49, 16, 169, 25, 33, 72, 80, 177, 56, 64, 10, 104, 112 };
    public static Rehab DefaultInstance {
      get { return defaultInstance; }
    }

    public override Rehab DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Rehab ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetRehab.QotGetRehab.internal__static_Qot_GetRehab_Rehab__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Rehab, Rehab.Builder> InternalFieldAccessors {
      get { return global::Qot_GetRehab.QotGetRehab.internal__static_Qot_GetRehab_Rehab__FieldAccessorTable; }
    }

    public const int TimeFieldNumber = 1;
    private bool hasTime;
    private string time_ = "";
    public bool HasTime {
      get { return hasTime; }
    }
    public string Time {
      get { return time_; }
    }

    public const int CompanyActFlagFieldNumber = 2;
    private bool hasCompanyActFlag;
    private long companyActFlag_;
    public bool HasCompanyActFlag {
      get { return hasCompanyActFlag; }
    }
    public long CompanyActFlag {
      get { return companyActFlag_; }
    }

    public const int FwdFactorAFieldNumber = 3;
    private bool hasFwdFactorA;
    private double fwdFactorA_;
    public bool HasFwdFactorA {
      get { return hasFwdFactorA; }
    }
    public double FwdFactorA {
      get { return fwdFactorA_; }
    }

    public const int FwdFactorBFieldNumber = 4;
    private bool hasFwdFactorB;
    private double fwdFactorB_;
    public bool HasFwdFactorB {
      get { return hasFwdFactorB; }
    }
    public double FwdFactorB {
      get { return fwdFactorB_; }
    }

    public const int BwdFactorAFieldNumber = 5;
    private bool hasBwdFactorA;
    private double bwdFactorA_;
    public bool HasBwdFactorA {
      get { return hasBwdFactorA; }
    }
    public double BwdFactorA {
      get { return bwdFactorA_; }
    }

    public const int BwdFactorBFieldNumber = 6;
    private bool hasBwdFactorB;
    private double bwdFactorB_;
    public bool HasBwdFactorB {
      get { return hasBwdFactorB; }
    }
    public double BwdFactorB {
      get { return bwdFactorB_; }
    }

    public const int SplitBaseFieldNumber = 7;
    private bool hasSplitBase;
    private int splitBase_;
    public bool HasSplitBase {
      get { return hasSplitBase; }
    }
    public int SplitBase {
      get { return splitBase_; }
    }

    public const int SplitErtFieldNumber = 8;
    private bool hasSplitErt;
    private int splitErt_;
    public bool HasSplitErt {
      get { return hasSplitErt; }
    }
    public int SplitErt {
      get { return splitErt_; }
    }

    public const int JoinBaseFieldNumber = 9;
    private bool hasJoinBase;
    private int joinBase_;
    public bool HasJoinBase {
      get { return hasJoinBase; }
    }
    public int JoinBase {
      get { return joinBase_; }
    }

    public const int JoinErtFieldNumber = 10;
    private bool hasJoinErt;
    private int joinErt_;
    public bool HasJoinErt {
      get { return hasJoinErt; }
    }
    public int JoinErt {
      get { return joinErt_; }
    }

    public const int BonusBaseFieldNumber = 11;
    private bool hasBonusBase;
    private int bonusBase_;
    public bool HasBonusBase {
      get { return hasBonusBase; }
    }
    public int BonusBase {
      get { return bonusBase_; }
    }

    public const int BonusErtFieldNumber = 12;
    private bool hasBonusErt;
    private int bonusErt_;
    public bool HasBonusErt {
      get { return hasBonusErt; }
    }
    public int BonusErt {
      get { return bonusErt_; }
    }

    public const int TransferBaseFieldNumber = 13;
    private bool hasTransferBase;
    private int transferBase_;
    public bool HasTransferBase {
      get { return hasTransferBase; }
    }
    public int TransferBase {
      get { return transferBase_; }
    }

    public const int TransferErtFieldNumber = 14;
    private bool hasTransferErt;
    private int transferErt_;
    public bool HasTransferErt {
      get { return hasTransferErt; }
    }
    public int TransferErt {
      get { return transferErt_; }
    }

    public const int AllotBaseFieldNumber = 15;
    private bool hasAllotBase;
    private int allotBase_;
    public bool HasAllotBase {
      get { return hasAllotBase; }
    }
    public int AllotBase {
      get { return allotBase_; }
    }

    public const int AllotErtFieldNumber = 16;
    private bool hasAllotErt;
    private int allotErt_;
    public bool HasAllotErt {
      get { return hasAllotErt; }
    }
    public int AllotErt {
      get { return allotErt_; }
    }

    public const int AllotPriceFieldNumber = 17;
    private bool hasAllotPrice;
    private double allotPrice_;
    public bool HasAllotPrice {
      get { return hasAllotPrice; }
    }
    public double AllotPrice {
      get { return allotPrice_; }
    }

    public const int AddBaseFieldNumber = 18;
    private bool hasAddBase;
    private int addBase_;
    public bool HasAddBase {
      get { return hasAddBase; }
    }
    public int AddBase {
      get { return addBase_; }
    }

    public const int AddErtFieldNumber = 19;
    private bool hasAddErt;
    private int addErt_;
    public bool HasAddErt {
      get { return hasAddErt; }
    }
    public int AddErt {
      get { return addErt_; }
    }

    public const int AddPriceFieldNumber = 20;
    private bool hasAddPrice;
    private double addPrice_;
    public bool HasAddPrice {
      get { return hasAddPrice; }
    }
    public double AddPrice {
      get { return addPrice_; }
    }

    public const int DividendFieldNumber = 21;
    private bool hasDividend;
    private double dividend_;
    public bool HasDividend {
      get { return hasDividend; }
    }
    public double Dividend {
      get { return dividend_; }
    }

    public const int SpDividendFieldNumber = 22;
    private bool hasSpDividend;
    private double spDividend_;
    public bool HasSpDividend {
      get { return hasSpDividend; }
    }
    public double SpDividend {
      get { return spDividend_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasTime) return false;
        if (!hasCompanyActFlag) return false;
        if (!hasFwdFactorA) return false;
        if (!hasFwdFactorB) return false;
        if (!hasBwdFactorA) return false;
        if (!hasBwdFactorB) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _rehabFieldNames;
      if (hasTime) {
        output.WriteString(1, field_names[19], Time);
      }
      if (hasCompanyActFlag) {
        output.WriteInt64(2, field_names[10], CompanyActFlag);
      }
      if (hasFwdFactorA) {
        output.WriteDouble(3, field_names[12], FwdFactorA);
      }
      if (hasFwdFactorB) {
        output.WriteDouble(4, field_names[13], FwdFactorB);
      }
      if (hasBwdFactorA) {
        output.WriteDouble(5, field_names[8], BwdFactorA);
      }
      if (hasBwdFactorB) {
        output.WriteDouble(6, field_names[9], BwdFactorB);
      }
      if (hasSplitBase) {
        output.WriteInt32(7, field_names[17], SplitBase);
      }
      if (hasSplitErt) {
        output.WriteInt32(8, field_names[18], SplitErt);
      }
      if (hasJoinBase) {
        output.WriteInt32(9, field_names[14], JoinBase);
      }
      if (hasJoinErt) {
        output.WriteInt32(10, field_names[15], JoinErt);
      }
      if (hasBonusBase) {
        output.WriteInt32(11, field_names[6], BonusBase);
      }
      if (hasBonusErt) {
        output.WriteInt32(12, field_names[7], BonusErt);
      }
      if (hasTransferBase) {
        output.WriteInt32(13, field_names[20], TransferBase);
      }
      if (hasTransferErt) {
        output.WriteInt32(14, field_names[21], TransferErt);
      }
      if (hasAllotBase) {
        output.WriteInt32(15, field_names[3], AllotBase);
      }
      if (hasAllotErt) {
        output.WriteInt32(16, field_names[4], AllotErt);
      }
      if (hasAllotPrice) {
        output.WriteDouble(17, field_names[5], AllotPrice);
      }
      if (hasAddBase) {
        output.WriteInt32(18, field_names[0], AddBase);
      }
      if (hasAddErt) {
        output.WriteInt32(19, field_names[1], AddErt);
      }
      if (hasAddPrice) {
        output.WriteDouble(20, field_names[2], AddPrice);
      }
      if (hasDividend) {
        output.WriteDouble(21, field_names[11], Dividend);
      }
      if (hasSpDividend) {
        output.WriteDouble(22, field_names[16], SpDividend);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Time);
      }
      if (hasCompanyActFlag) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, CompanyActFlag);
      }
      if (hasFwdFactorA) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, FwdFactorA);
      }
      if (hasFwdFactorB) {
        size += pb::CodedOutputStream.ComputeDoubleSize(4, FwdFactorB);
      }
      if (hasBwdFactorA) {
        size += pb::CodedOutputStream.ComputeDoubleSize(5, BwdFactorA);
      }
      if (hasBwdFactorB) {
        size += pb::CodedOutputStream.ComputeDoubleSize(6, BwdFactorB);
      }
      if (hasSplitBase) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, SplitBase);
      }
      if (hasSplitErt) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, SplitErt);
      }
      if (hasJoinBase) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, JoinBase);
      }
      if (hasJoinErt) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, JoinErt);
      }
      if (hasBonusBase) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, BonusBase);
      }
      if (hasBonusErt) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, BonusErt);
      }
      if (hasTransferBase) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, TransferBase);
      }
      if (hasTransferErt) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, TransferErt);
      }
      if (hasAllotBase) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, AllotBase);
      }
      if (hasAllotErt) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, AllotErt);
      }
      if (hasAllotPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(17, AllotPrice);
      }
      if (hasAddBase) {
        size += pb::CodedOutputStream.ComputeInt32Size(18, AddBase);
      }
      if (hasAddErt) {
        size += pb::CodedOutputStream.ComputeInt32Size(19, AddErt);
      }
      if (hasAddPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(20, AddPrice);
      }
      if (hasDividend) {
        size += pb::CodedOutputStream.ComputeDoubleSize(21, Dividend);
      }
      if (hasSpDividend) {
        size += pb::CodedOutputStream.ComputeDoubleSize(22, SpDividend);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Rehab ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Rehab ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Rehab ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Rehab ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Rehab ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Rehab ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Rehab ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Rehab ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Rehab ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Rehab ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Rehab MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Rehab prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Rehab, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Rehab cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Rehab result;

      private Rehab PrepareBuilder() {
        if (resultIsReadOnly) {
          Rehab original = result;
          result = new Rehab();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Rehab MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetRehab.Rehab.Descriptor; }
      }

      public override Rehab DefaultInstanceForType {
        get { return global::Qot_GetRehab.Rehab.DefaultInstance; }
      }

      public override Rehab BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Rehab) {
          return MergeFrom((Rehab) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Rehab other) {
        if (other == global::Qot_GetRehab.Rehab.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasCompanyActFlag) {
          CompanyActFlag = other.CompanyActFlag;
        }
        if (other.HasFwdFactorA) {
          FwdFactorA = other.FwdFactorA;
        }
        if (other.HasFwdFactorB) {
          FwdFactorB = other.FwdFactorB;
        }
        if (other.HasBwdFactorA) {
          BwdFactorA = other.BwdFactorA;
        }
        if (other.HasBwdFactorB) {
          BwdFactorB = other.BwdFactorB;
        }
        if (other.HasSplitBase) {
          SplitBase = other.SplitBase;
        }
        if (other.HasSplitErt) {
          SplitErt = other.SplitErt;
        }
        if (other.HasJoinBase) {
          JoinBase = other.JoinBase;
        }
        if (other.HasJoinErt) {
          JoinErt = other.JoinErt;
        }
        if (other.HasBonusBase) {
          BonusBase = other.BonusBase;
        }
        if (other.HasBonusErt) {
          BonusErt = other.BonusErt;
        }
        if (other.HasTransferBase) {
          TransferBase = other.TransferBase;
        }
        if (other.HasTransferErt) {
          TransferErt = other.TransferErt;
        }
        if (other.HasAllotBase) {
          AllotBase = other.AllotBase;
        }
        if (other.HasAllotErt) {
          AllotErt = other.AllotErt;
        }
        if (other.HasAllotPrice) {
          AllotPrice = other.AllotPrice;
        }
        if (other.HasAddBase) {
          AddBase = other.AddBase;
        }
        if (other.HasAddErt) {
          AddErt = other.AddErt;
        }
        if (other.HasAddPrice) {
          AddPrice = other.AddPrice;
        }
        if (other.HasDividend) {
          Dividend = other.Dividend;
        }
        if (other.HasSpDividend) {
          SpDividend = other.SpDividend;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rehabFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rehabFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTime = input.ReadString(ref result.time_);
              break;
            }
            case 16: {
              result.hasCompanyActFlag = input.ReadInt64(ref result.companyActFlag_);
              break;
            }
            case 25: {
              result.hasFwdFactorA = input.ReadDouble(ref result.fwdFactorA_);
              break;
            }
            case 33: {
              result.hasFwdFactorB = input.ReadDouble(ref result.fwdFactorB_);
              break;
            }
            case 41: {
              result.hasBwdFactorA = input.ReadDouble(ref result.bwdFactorA_);
              break;
            }
            case 49: {
              result.hasBwdFactorB = input.ReadDouble(ref result.bwdFactorB_);
              break;
            }
            case 56: {
              result.hasSplitBase = input.ReadInt32(ref result.splitBase_);
              break;
            }
            case 64: {
              result.hasSplitErt = input.ReadInt32(ref result.splitErt_);
              break;
            }
            case 72: {
              result.hasJoinBase = input.ReadInt32(ref result.joinBase_);
              break;
            }
            case 80: {
              result.hasJoinErt = input.ReadInt32(ref result.joinErt_);
              break;
            }
            case 88: {
              result.hasBonusBase = input.ReadInt32(ref result.bonusBase_);
              break;
            }
            case 96: {
              result.hasBonusErt = input.ReadInt32(ref result.bonusErt_);
              break;
            }
            case 104: {
              result.hasTransferBase = input.ReadInt32(ref result.transferBase_);
              break;
            }
            case 112: {
              result.hasTransferErt = input.ReadInt32(ref result.transferErt_);
              break;
            }
            case 120: {
              result.hasAllotBase = input.ReadInt32(ref result.allotBase_);
              break;
            }
            case 128: {
              result.hasAllotErt = input.ReadInt32(ref result.allotErt_);
              break;
            }
            case 137: {
              result.hasAllotPrice = input.ReadDouble(ref result.allotPrice_);
              break;
            }
            case 144: {
              result.hasAddBase = input.ReadInt32(ref result.addBase_);
              break;
            }
            case 152: {
              result.hasAddErt = input.ReadInt32(ref result.addErt_);
              break;
            }
            case 161: {
              result.hasAddPrice = input.ReadDouble(ref result.addPrice_);
              break;
            }
            case 169: {
              result.hasDividend = input.ReadDouble(ref result.dividend_);
              break;
            }
            case 177: {
              result.hasSpDividend = input.ReadDouble(ref result.spDividend_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasTime {
        get { return result.hasTime; }
      }
      public string Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = "";
        return this;
      }

      public bool HasCompanyActFlag {
        get { return result.hasCompanyActFlag; }
      }
      public long CompanyActFlag {
        get { return result.CompanyActFlag; }
        set { SetCompanyActFlag(value); }
      }
      public Builder SetCompanyActFlag(long value) {
        PrepareBuilder();
        result.hasCompanyActFlag = true;
        result.companyActFlag_ = value;
        return this;
      }
      public Builder ClearCompanyActFlag() {
        PrepareBuilder();
        result.hasCompanyActFlag = false;
        result.companyActFlag_ = 0L;
        return this;
      }

      public bool HasFwdFactorA {
        get { return result.hasFwdFactorA; }
      }
      public double FwdFactorA {
        get { return result.FwdFactorA; }
        set { SetFwdFactorA(value); }
      }
      public Builder SetFwdFactorA(double value) {
        PrepareBuilder();
        result.hasFwdFactorA = true;
        result.fwdFactorA_ = value;
        return this;
      }
      public Builder ClearFwdFactorA() {
        PrepareBuilder();
        result.hasFwdFactorA = false;
        result.fwdFactorA_ = 0D;
        return this;
      }

      public bool HasFwdFactorB {
        get { return result.hasFwdFactorB; }
      }
      public double FwdFactorB {
        get { return result.FwdFactorB; }
        set { SetFwdFactorB(value); }
      }
      public Builder SetFwdFactorB(double value) {
        PrepareBuilder();
        result.hasFwdFactorB = true;
        result.fwdFactorB_ = value;
        return this;
      }
      public Builder ClearFwdFactorB() {
        PrepareBuilder();
        result.hasFwdFactorB = false;
        result.fwdFactorB_ = 0D;
        return this;
      }

      public bool HasBwdFactorA {
        get { return result.hasBwdFactorA; }
      }
      public double BwdFactorA {
        get { return result.BwdFactorA; }
        set { SetBwdFactorA(value); }
      }
      public Builder SetBwdFactorA(double value) {
        PrepareBuilder();
        result.hasBwdFactorA = true;
        result.bwdFactorA_ = value;
        return this;
      }
      public Builder ClearBwdFactorA() {
        PrepareBuilder();
        result.hasBwdFactorA = false;
        result.bwdFactorA_ = 0D;
        return this;
      }

      public bool HasBwdFactorB {
        get { return result.hasBwdFactorB; }
      }
      public double BwdFactorB {
        get { return result.BwdFactorB; }
        set { SetBwdFactorB(value); }
      }
      public Builder SetBwdFactorB(double value) {
        PrepareBuilder();
        result.hasBwdFactorB = true;
        result.bwdFactorB_ = value;
        return this;
      }
      public Builder ClearBwdFactorB() {
        PrepareBuilder();
        result.hasBwdFactorB = false;
        result.bwdFactorB_ = 0D;
        return this;
      }

      public bool HasSplitBase {
        get { return result.hasSplitBase; }
      }
      public int SplitBase {
        get { return result.SplitBase; }
        set { SetSplitBase(value); }
      }
      public Builder SetSplitBase(int value) {
        PrepareBuilder();
        result.hasSplitBase = true;
        result.splitBase_ = value;
        return this;
      }
      public Builder ClearSplitBase() {
        PrepareBuilder();
        result.hasSplitBase = false;
        result.splitBase_ = 0;
        return this;
      }

      public bool HasSplitErt {
        get { return result.hasSplitErt; }
      }
      public int SplitErt {
        get { return result.SplitErt; }
        set { SetSplitErt(value); }
      }
      public Builder SetSplitErt(int value) {
        PrepareBuilder();
        result.hasSplitErt = true;
        result.splitErt_ = value;
        return this;
      }
      public Builder ClearSplitErt() {
        PrepareBuilder();
        result.hasSplitErt = false;
        result.splitErt_ = 0;
        return this;
      }

      public bool HasJoinBase {
        get { return result.hasJoinBase; }
      }
      public int JoinBase {
        get { return result.JoinBase; }
        set { SetJoinBase(value); }
      }
      public Builder SetJoinBase(int value) {
        PrepareBuilder();
        result.hasJoinBase = true;
        result.joinBase_ = value;
        return this;
      }
      public Builder ClearJoinBase() {
        PrepareBuilder();
        result.hasJoinBase = false;
        result.joinBase_ = 0;
        return this;
      }

      public bool HasJoinErt {
        get { return result.hasJoinErt; }
      }
      public int JoinErt {
        get { return result.JoinErt; }
        set { SetJoinErt(value); }
      }
      public Builder SetJoinErt(int value) {
        PrepareBuilder();
        result.hasJoinErt = true;
        result.joinErt_ = value;
        return this;
      }
      public Builder ClearJoinErt() {
        PrepareBuilder();
        result.hasJoinErt = false;
        result.joinErt_ = 0;
        return this;
      }

      public bool HasBonusBase {
        get { return result.hasBonusBase; }
      }
      public int BonusBase {
        get { return result.BonusBase; }
        set { SetBonusBase(value); }
      }
      public Builder SetBonusBase(int value) {
        PrepareBuilder();
        result.hasBonusBase = true;
        result.bonusBase_ = value;
        return this;
      }
      public Builder ClearBonusBase() {
        PrepareBuilder();
        result.hasBonusBase = false;
        result.bonusBase_ = 0;
        return this;
      }

      public bool HasBonusErt {
        get { return result.hasBonusErt; }
      }
      public int BonusErt {
        get { return result.BonusErt; }
        set { SetBonusErt(value); }
      }
      public Builder SetBonusErt(int value) {
        PrepareBuilder();
        result.hasBonusErt = true;
        result.bonusErt_ = value;
        return this;
      }
      public Builder ClearBonusErt() {
        PrepareBuilder();
        result.hasBonusErt = false;
        result.bonusErt_ = 0;
        return this;
      }

      public bool HasTransferBase {
        get { return result.hasTransferBase; }
      }
      public int TransferBase {
        get { return result.TransferBase; }
        set { SetTransferBase(value); }
      }
      public Builder SetTransferBase(int value) {
        PrepareBuilder();
        result.hasTransferBase = true;
        result.transferBase_ = value;
        return this;
      }
      public Builder ClearTransferBase() {
        PrepareBuilder();
        result.hasTransferBase = false;
        result.transferBase_ = 0;
        return this;
      }

      public bool HasTransferErt {
        get { return result.hasTransferErt; }
      }
      public int TransferErt {
        get { return result.TransferErt; }
        set { SetTransferErt(value); }
      }
      public Builder SetTransferErt(int value) {
        PrepareBuilder();
        result.hasTransferErt = true;
        result.transferErt_ = value;
        return this;
      }
      public Builder ClearTransferErt() {
        PrepareBuilder();
        result.hasTransferErt = false;
        result.transferErt_ = 0;
        return this;
      }

      public bool HasAllotBase {
        get { return result.hasAllotBase; }
      }
      public int AllotBase {
        get { return result.AllotBase; }
        set { SetAllotBase(value); }
      }
      public Builder SetAllotBase(int value) {
        PrepareBuilder();
        result.hasAllotBase = true;
        result.allotBase_ = value;
        return this;
      }
      public Builder ClearAllotBase() {
        PrepareBuilder();
        result.hasAllotBase = false;
        result.allotBase_ = 0;
        return this;
      }

      public bool HasAllotErt {
        get { return result.hasAllotErt; }
      }
      public int AllotErt {
        get { return result.AllotErt; }
        set { SetAllotErt(value); }
      }
      public Builder SetAllotErt(int value) {
        PrepareBuilder();
        result.hasAllotErt = true;
        result.allotErt_ = value;
        return this;
      }
      public Builder ClearAllotErt() {
        PrepareBuilder();
        result.hasAllotErt = false;
        result.allotErt_ = 0;
        return this;
      }

      public bool HasAllotPrice {
        get { return result.hasAllotPrice; }
      }
      public double AllotPrice {
        get { return result.AllotPrice; }
        set { SetAllotPrice(value); }
      }
      public Builder SetAllotPrice(double value) {
        PrepareBuilder();
        result.hasAllotPrice = true;
        result.allotPrice_ = value;
        return this;
      }
      public Builder ClearAllotPrice() {
        PrepareBuilder();
        result.hasAllotPrice = false;
        result.allotPrice_ = 0D;
        return this;
      }

      public bool HasAddBase {
        get { return result.hasAddBase; }
      }
      public int AddBase {
        get { return result.AddBase; }
        set { SetAddBase(value); }
      }
      public Builder SetAddBase(int value) {
        PrepareBuilder();
        result.hasAddBase = true;
        result.addBase_ = value;
        return this;
      }
      public Builder ClearAddBase() {
        PrepareBuilder();
        result.hasAddBase = false;
        result.addBase_ = 0;
        return this;
      }

      public bool HasAddErt {
        get { return result.hasAddErt; }
      }
      public int AddErt {
        get { return result.AddErt; }
        set { SetAddErt(value); }
      }
      public Builder SetAddErt(int value) {
        PrepareBuilder();
        result.hasAddErt = true;
        result.addErt_ = value;
        return this;
      }
      public Builder ClearAddErt() {
        PrepareBuilder();
        result.hasAddErt = false;
        result.addErt_ = 0;
        return this;
      }

      public bool HasAddPrice {
        get { return result.hasAddPrice; }
      }
      public double AddPrice {
        get { return result.AddPrice; }
        set { SetAddPrice(value); }
      }
      public Builder SetAddPrice(double value) {
        PrepareBuilder();
        result.hasAddPrice = true;
        result.addPrice_ = value;
        return this;
      }
      public Builder ClearAddPrice() {
        PrepareBuilder();
        result.hasAddPrice = false;
        result.addPrice_ = 0D;
        return this;
      }

      public bool HasDividend {
        get { return result.hasDividend; }
      }
      public double Dividend {
        get { return result.Dividend; }
        set { SetDividend(value); }
      }
      public Builder SetDividend(double value) {
        PrepareBuilder();
        result.hasDividend = true;
        result.dividend_ = value;
        return this;
      }
      public Builder ClearDividend() {
        PrepareBuilder();
        result.hasDividend = false;
        result.dividend_ = 0D;
        return this;
      }

      public bool HasSpDividend {
        get { return result.hasSpDividend; }
      }
      public double SpDividend {
        get { return result.SpDividend; }
        set { SetSpDividend(value); }
      }
      public Builder SetSpDividend(double value) {
        PrepareBuilder();
        result.hasSpDividend = true;
        result.spDividend_ = value;
        return this;
      }
      public Builder ClearSpDividend() {
        PrepareBuilder();
        result.hasSpDividend = false;
        result.spDividend_ = 0D;
        return this;
      }
    }
    static Rehab() {
      object.ReferenceEquals(global::Qot_GetRehab.QotGetRehab.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SecurityRehab : pb::GeneratedMessage<SecurityRehab, SecurityRehab.Builder> {
    private SecurityRehab() { }
    private static readonly SecurityRehab defaultInstance = new SecurityRehab().MakeReadOnly();
    private static readonly string[] _securityRehabFieldNames = new string[] { "rehabList", "security" };
    private static readonly uint[] _securityRehabFieldTags = new uint[] { 18, 10 };
    public static SecurityRehab DefaultInstance {
      get { return defaultInstance; }
    }

    public override SecurityRehab DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override SecurityRehab ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetRehab.QotGetRehab.internal__static_Qot_GetRehab_SecurityRehab__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<SecurityRehab, SecurityRehab.Builder> InternalFieldAccessors {
      get { return global::Qot_GetRehab.QotGetRehab.internal__static_Qot_GetRehab_SecurityRehab__FieldAccessorTable; }
    }

    public const int SecurityFieldNumber = 1;
    private bool hasSecurity;
    private global::Qot_Common.Security security_;
    public bool HasSecurity {
      get { return hasSecurity; }
    }
    public global::Qot_Common.Security Security {
      get { return security_ ?? global::Qot_Common.Security.DefaultInstance; }
    }

    public const int RehabListFieldNumber = 2;
    private pbc::PopsicleList<global::Qot_GetRehab.Rehab> rehabList_ = new pbc::PopsicleList<global::Qot_GetRehab.Rehab>();
    public scg::IList<global::Qot_GetRehab.Rehab> RehabListList {
      get { return rehabList_; }
    }
    public int RehabListCount {
      get { return rehabList_.Count; }
    }
    public global::Qot_GetRehab.Rehab GetRehabList(int index) {
      return rehabList_[index];
    }

    public override bool IsInitialized {
      get {
        if (!hasSecurity) return false;
        if (!Security.IsInitialized) return false;
        foreach (global::Qot_GetRehab.Rehab element in RehabListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _securityRehabFieldNames;
      if (hasSecurity) {
        output.WriteMessage(1, field_names[1], Security);
      }
      if (rehabList_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], rehabList_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasSecurity) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Security);
      }
      foreach (global::Qot_GetRehab.Rehab element in RehabListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SecurityRehab ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SecurityRehab ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SecurityRehab ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SecurityRehab ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SecurityRehab ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SecurityRehab ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SecurityRehab ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SecurityRehab ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SecurityRehab ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SecurityRehab ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SecurityRehab MakeReadOnly() {
      rehabList_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SecurityRehab prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SecurityRehab, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SecurityRehab cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private SecurityRehab result;

      private SecurityRehab PrepareBuilder() {
        if (resultIsReadOnly) {
          SecurityRehab original = result;
          result = new SecurityRehab();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override SecurityRehab MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetRehab.SecurityRehab.Descriptor; }
      }

      public override SecurityRehab DefaultInstanceForType {
        get { return global::Qot_GetRehab.SecurityRehab.DefaultInstance; }
      }

      public override SecurityRehab BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SecurityRehab) {
          return MergeFrom((SecurityRehab) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(SecurityRehab other) {
        if (other == global::Qot_GetRehab.SecurityRehab.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSecurity) {
          MergeSecurity(other.Security);
        }
        if (other.rehabList_.Count != 0) {
          result.rehabList_.Add(other.rehabList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_securityRehabFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _securityRehabFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Qot_Common.Security.Builder subBuilder = global::Qot_Common.Security.CreateBuilder();
              if (result.hasSecurity) {
                subBuilder.MergeFrom(Security);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Security = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.rehabList_, global::Qot_GetRehab.Rehab.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasSecurity {
       get { return result.hasSecurity; }
      }
      public global::Qot_Common.Security Security {
        get { return result.Security; }
        set { SetSecurity(value); }
      }
      public Builder SetSecurity(global::Qot_Common.Security value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSecurity = true;
        result.security_ = value;
        return this;
      }
      public Builder SetSecurity(global::Qot_Common.Security.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSecurity = true;
        result.security_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSecurity(global::Qot_Common.Security value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSecurity &&
            result.security_ != global::Qot_Common.Security.DefaultInstance) {
            result.security_ = global::Qot_Common.Security.CreateBuilder(result.security_).MergeFrom(value).BuildPartial();
        } else {
          result.security_ = value;
        }
        result.hasSecurity = true;
        return this;
      }
      public Builder ClearSecurity() {
        PrepareBuilder();
        result.hasSecurity = false;
        result.security_ = null;
        return this;
      }

      public pbc::IPopsicleList<global::Qot_GetRehab.Rehab> RehabListList {
        get { return PrepareBuilder().rehabList_; }
      }
      public int RehabListCount {
        get { return result.RehabListCount; }
      }
      public global::Qot_GetRehab.Rehab GetRehabList(int index) {
        return result.GetRehabList(index);
      }
      public Builder SetRehabList(int index, global::Qot_GetRehab.Rehab value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rehabList_[index] = value;
        return this;
      }
      public Builder SetRehabList(int index, global::Qot_GetRehab.Rehab.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rehabList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRehabList(global::Qot_GetRehab.Rehab value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rehabList_.Add(value);
        return this;
      }
      public Builder AddRehabList(global::Qot_GetRehab.Rehab.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rehabList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRehabList(scg::IEnumerable<global::Qot_GetRehab.Rehab> values) {
        PrepareBuilder();
        result.rehabList_.Add(values);
        return this;
      }
      public Builder ClearRehabList() {
        PrepareBuilder();
        result.rehabList_.Clear();
        return this;
      }
    }
    static SecurityRehab() {
      object.ReferenceEquals(global::Qot_GetRehab.QotGetRehab.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2C : pb::GeneratedMessage<S2C, S2C.Builder> {
    private S2C() { }
    private static readonly S2C defaultInstance = new S2C().MakeReadOnly();
    private static readonly string[] _s2CFieldNames = new string[] { "securityRehabList" };
    private static readonly uint[] _s2CFieldTags = new uint[] { 10 };
    public static S2C DefaultInstance {
      get { return defaultInstance; }
    }

    public override S2C DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override S2C ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetRehab.QotGetRehab.internal__static_Qot_GetRehab_S2C__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<S2C, S2C.Builder> InternalFieldAccessors {
      get { return global::Qot_GetRehab.QotGetRehab.internal__static_Qot_GetRehab_S2C__FieldAccessorTable; }
    }

    public const int SecurityRehabListFieldNumber = 1;
    private pbc::PopsicleList<global::Qot_GetRehab.SecurityRehab> securityRehabList_ = new pbc::PopsicleList<global::Qot_GetRehab.SecurityRehab>();
    public scg::IList<global::Qot_GetRehab.SecurityRehab> SecurityRehabListList {
      get { return securityRehabList_; }
    }
    public int SecurityRehabListCount {
      get { return securityRehabList_.Count; }
    }
    public global::Qot_GetRehab.SecurityRehab GetSecurityRehabList(int index) {
      return securityRehabList_[index];
    }

    public override bool IsInitialized {
      get {
        foreach (global::Qot_GetRehab.SecurityRehab element in SecurityRehabListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CFieldNames;
      if (securityRehabList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], securityRehabList_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      foreach (global::Qot_GetRehab.SecurityRehab element in SecurityRehabListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2C MakeReadOnly() {
      securityRehabList_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2C prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private S2C result;

      private S2C PrepareBuilder() {
        if (resultIsReadOnly) {
          S2C original = result;
          result = new S2C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override S2C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetRehab.S2C.Descriptor; }
      }

      public override S2C DefaultInstanceForType {
        get { return global::Qot_GetRehab.S2C.DefaultInstance; }
      }

      public override S2C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2C) {
          return MergeFrom((S2C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(S2C other) {
        if (other == global::Qot_GetRehab.S2C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.securityRehabList_.Count != 0) {
          result.securityRehabList_.Add(other.securityRehabList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.securityRehabList_, global::Qot_GetRehab.SecurityRehab.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public pbc::IPopsicleList<global::Qot_GetRehab.SecurityRehab> SecurityRehabListList {
        get { return PrepareBuilder().securityRehabList_; }
      }
      public int SecurityRehabListCount {
        get { return result.SecurityRehabListCount; }
      }
      public global::Qot_GetRehab.SecurityRehab GetSecurityRehabList(int index) {
        return result.GetSecurityRehabList(index);
      }
      public Builder SetSecurityRehabList(int index, global::Qot_GetRehab.SecurityRehab value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.securityRehabList_[index] = value;
        return this;
      }
      public Builder SetSecurityRehabList(int index, global::Qot_GetRehab.SecurityRehab.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.securityRehabList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSecurityRehabList(global::Qot_GetRehab.SecurityRehab value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.securityRehabList_.Add(value);
        return this;
      }
      public Builder AddSecurityRehabList(global::Qot_GetRehab.SecurityRehab.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.securityRehabList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSecurityRehabList(scg::IEnumerable<global::Qot_GetRehab.SecurityRehab> values) {
        PrepareBuilder();
        result.securityRehabList_.Add(values);
        return this;
      }
      public Builder ClearSecurityRehabList() {
        PrepareBuilder();
        result.securityRehabList_.Clear();
        return this;
      }
    }
    static S2C() {
      object.ReferenceEquals(global::Qot_GetRehab.QotGetRehab.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
    private Request() { }
    private static readonly Request defaultInstance = new Request().MakeReadOnly();
    private static readonly string[] _requestFieldNames = new string[] { "c2s" };
    private static readonly uint[] _requestFieldTags = new uint[] { 10 };
    public static Request DefaultInstance {
      get { return defaultInstance; }
    }

    public override Request DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Request ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetRehab.QotGetRehab.internal__static_Qot_GetRehab_Request__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
      get { return global::Qot_GetRehab.QotGetRehab.internal__static_Qot_GetRehab_Request__FieldAccessorTable; }
    }

    public const int C2SFieldNumber = 1;
    private bool hasC2S;
    private global::Qot_GetRehab.C2S c2S_;
    public bool HasC2S {
      get { return hasC2S; }
    }
    public global::Qot_GetRehab.C2S C2S {
      get { return c2S_ ?? global::Qot_GetRehab.C2S.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (!hasC2S) return false;
        if (!C2S.IsInitialized) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _requestFieldNames;
      if (hasC2S) {
        output.WriteMessage(1, field_names[0], C2S);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasC2S) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, C2S);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Request ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Request ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Request ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Request ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Request MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Request prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Request cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Request result;

      private Request PrepareBuilder() {
        if (resultIsReadOnly) {
          Request original = result;
          result = new Request();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Request MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetRehab.Request.Descriptor; }
      }

      public override Request DefaultInstanceForType {
        get { return global::Qot_GetRehab.Request.DefaultInstance; }
      }

      public override Request BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Request) {
          return MergeFrom((Request) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Request other) {
        if (other == global::Qot_GetRehab.Request.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasC2S) {
          MergeC2S(other.C2S);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Qot_GetRehab.C2S.Builder subBuilder = global::Qot_GetRehab.C2S.CreateBuilder();
              if (result.hasC2S) {
                subBuilder.MergeFrom(C2S);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              C2S = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasC2S {
       get { return result.hasC2S; }
      }
      public global::Qot_GetRehab.C2S C2S {
        get { return result.C2S; }
        set { SetC2S(value); }
      }
      public Builder SetC2S(global::Qot_GetRehab.C2S value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasC2S = true;
        result.c2S_ = value;
        return this;
      }
      public Builder SetC2S(global::Qot_GetRehab.C2S.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasC2S = true;
        result.c2S_ = builderForValue.Build();
        return this;
      }
      public Builder MergeC2S(global::Qot_GetRehab.C2S value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasC2S &&
            result.c2S_ != global::Qot_GetRehab.C2S.DefaultInstance) {
            result.c2S_ = global::Qot_GetRehab.C2S.CreateBuilder(result.c2S_).MergeFrom(value).BuildPartial();
        } else {
          result.c2S_ = value;
        }
        result.hasC2S = true;
        return this;
      }
      public Builder ClearC2S() {
        PrepareBuilder();
        result.hasC2S = false;
        result.c2S_ = null;
        return this;
      }
    }
    static Request() {
      object.ReferenceEquals(global::Qot_GetRehab.QotGetRehab.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
    private Response() { }
    private static readonly Response defaultInstance = new Response().MakeReadOnly();
    private static readonly string[] _responseFieldNames = new string[] { "errCode", "retMsg", "retType", "s2c" };
    private static readonly uint[] _responseFieldTags = new uint[] { 24, 18, 8, 34 };
    public static Response DefaultInstance {
      get { return defaultInstance; }
    }

    public override Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Response ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qot_GetRehab.QotGetRehab.internal__static_Qot_GetRehab_Response__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
      get { return global::Qot_GetRehab.QotGetRehab.internal__static_Qot_GetRehab_Response__FieldAccessorTable; }
    }

    public const int RetTypeFieldNumber = 1;
    private bool hasRetType;
    private int retType_ = -400;
    public bool HasRetType {
      get { return hasRetType; }
    }
    public int RetType {
      get { return retType_; }
    }

    public const int RetMsgFieldNumber = 2;
    private bool hasRetMsg;
    private string retMsg_ = "";
    public bool HasRetMsg {
      get { return hasRetMsg; }
    }
    public string RetMsg {
      get { return retMsg_; }
    }

    public const int ErrCodeFieldNumber = 3;
    private bool hasErrCode;
    private int errCode_;
    public bool HasErrCode {
      get { return hasErrCode; }
    }
    public int ErrCode {
      get { return errCode_; }
    }

    public const int S2CFieldNumber = 4;
    private bool hasS2C;
    private global::Qot_GetRehab.S2C s2C_;
    public bool HasS2C {
      get { return hasS2C; }
    }
    public global::Qot_GetRehab.S2C S2C {
      get { return s2C_ ?? global::Qot_GetRehab.S2C.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (!hasRetType) return false;
        if (HasS2C) {
          if (!S2C.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _responseFieldNames;
      if (hasRetType) {
        output.WriteInt32(1, field_names[2], RetType);
      }
      if (hasRetMsg) {
        output.WriteString(2, field_names[1], RetMsg);
      }
      if (hasErrCode) {
        output.WriteInt32(3, field_names[0], ErrCode);
      }
      if (hasS2C) {
        output.WriteMessage(4, field_names[3], S2C);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasRetType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, RetType);
      }
      if (hasRetMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(2, RetMsg);
      }
      if (hasErrCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, ErrCode);
      }
      if (hasS2C) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, S2C);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Response MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Response prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Response result;

      private Response PrepareBuilder() {
        if (resultIsReadOnly) {
          Response original = result;
          result = new Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qot_GetRehab.Response.Descriptor; }
      }

      public override Response DefaultInstanceForType {
        get { return global::Qot_GetRehab.Response.DefaultInstance; }
      }

      public override Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Response) {
          return MergeFrom((Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Response other) {
        if (other == global::Qot_GetRehab.Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRetType) {
          RetType = other.RetType;
        }
        if (other.HasRetMsg) {
          RetMsg = other.RetMsg;
        }
        if (other.HasErrCode) {
          ErrCode = other.ErrCode;
        }
        if (other.HasS2C) {
          MergeS2C(other.S2C);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _responseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRetType = input.ReadInt32(ref result.retType_);
              break;
            }
            case 18: {
              result.hasRetMsg = input.ReadString(ref result.retMsg_);
              break;
            }
            case 24: {
              result.hasErrCode = input.ReadInt32(ref result.errCode_);
              break;
            }
            case 34: {
              global::Qot_GetRehab.S2C.Builder subBuilder = global::Qot_GetRehab.S2C.CreateBuilder();
              if (result.hasS2C) {
                subBuilder.MergeFrom(S2C);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              S2C = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasRetType {
        get { return result.hasRetType; }
      }
      public int RetType {
        get { return result.RetType; }
        set { SetRetType(value); }
      }
      public Builder SetRetType(int value) {
        PrepareBuilder();
        result.hasRetType = true;
        result.retType_ = value;
        return this;
      }
      public Builder ClearRetType() {
        PrepareBuilder();
        result.hasRetType = false;
        result.retType_ = -400;
        return this;
      }

      public bool HasRetMsg {
        get { return result.hasRetMsg; }
      }
      public string RetMsg {
        get { return result.RetMsg; }
        set { SetRetMsg(value); }
      }
      public Builder SetRetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRetMsg = true;
        result.retMsg_ = value;
        return this;
      }
      public Builder ClearRetMsg() {
        PrepareBuilder();
        result.hasRetMsg = false;
        result.retMsg_ = "";
        return this;
      }

      public bool HasErrCode {
        get { return result.hasErrCode; }
      }
      public int ErrCode {
        get { return result.ErrCode; }
        set { SetErrCode(value); }
      }
      public Builder SetErrCode(int value) {
        PrepareBuilder();
        result.hasErrCode = true;
        result.errCode_ = value;
        return this;
      }
      public Builder ClearErrCode() {
        PrepareBuilder();
        result.hasErrCode = false;
        result.errCode_ = 0;
        return this;
      }

      public bool HasS2C {
       get { return result.hasS2C; }
      }
      public global::Qot_GetRehab.S2C S2C {
        get { return result.S2C; }
        set { SetS2C(value); }
      }
      public Builder SetS2C(global::Qot_GetRehab.S2C value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasS2C = true;
        result.s2C_ = value;
        return this;
      }
      public Builder SetS2C(global::Qot_GetRehab.S2C.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasS2C = true;
        result.s2C_ = builderForValue.Build();
        return this;
      }
      public Builder MergeS2C(global::Qot_GetRehab.S2C value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasS2C &&
            result.s2C_ != global::Qot_GetRehab.S2C.DefaultInstance) {
            result.s2C_ = global::Qot_GetRehab.S2C.CreateBuilder(result.s2C_).MergeFrom(value).BuildPartial();
        } else {
          result.s2C_ = value;
        }
        result.hasS2C = true;
        return this;
      }
      public Builder ClearS2C() {
        PrepareBuilder();
        result.hasS2C = false;
        result.s2C_ = null;
        return this;
      }
    }
    static Response() {
      object.ReferenceEquals(global::Qot_GetRehab.QotGetRehab.Descriptor, null);
    }
  }

  #endregion

}

#endregion Designer generated code
