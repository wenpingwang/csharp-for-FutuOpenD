// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GetGlobalState.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace GetGlobalState {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GetGlobalState {

    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_GetGlobalState_C2S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::GetGlobalState.C2S, global::GetGlobalState.C2S.Builder> internal__static_GetGlobalState_C2S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_GetGlobalState_S2C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::GetGlobalState.S2C, global::GetGlobalState.S2C.Builder> internal__static_GetGlobalState_S2C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_GetGlobalState_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::GetGlobalState.Request, global::GetGlobalState.Request.Builder> internal__static_GetGlobalState_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_GetGlobalState_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::GetGlobalState.Response, global::GetGlobalState.Response.Builder> internal__static_GetGlobalState_Response__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;

    static GetGlobalState() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRHZXRHbG9iYWxTdGF0ZS5wcm90bxIOR2V0R2xvYmFsU3RhdGUaDENvbW1v", 
            "bi5wcm90bxoQUW90X0NvbW1vbi5wcm90byIVCgNDMlMSDgoGdXNlcklEGAEg", 
            "AigEItgBCgNTMkMSEAoIbWFya2V0SEsYASACKAUSEAoIbWFya2V0VVMYAiAC", 
            "KAUSEAoIbWFya2V0U0gYAyACKAUSEAoIbWFya2V0U1oYBCACKAUSFgoObWFy", 
            "a2V0SEtGdXR1cmUYBSACKAUSEgoKcW90TG9naW5lZBgGIAIoCBISCgp0cmRM", 
            "b2dpbmVkGAcgAigIEhEKCXNlcnZlclZlchgIIAIoBRIVCg1zZXJ2ZXJCdWls", 
            "ZE5vGAkgAigFEgwKBHRpbWUYCiACKAMSEQoJbG9jYWxUaW1lGAsgASgBIisK", 
            "B1JlcXVlc3QSIAoDYzJzGAEgAigLMhMuR2V0R2xvYmFsU3RhdGUuQzJTImQK", 
            "CFJlc3BvbnNlEhUKB3JldFR5cGUYASACKAU6BC00MDASDgoGcmV0TXNnGAIg", 
            "ASgJEg8KB2VyckNvZGUYAyABKAUSIAoDczJjGAQgASgLMhMuR2V0R2xvYmFs", 
          "U3RhdGUuUzJD"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_GetGlobalState_C2S__Descriptor = Descriptor.MessageTypes[0];
        internal__static_GetGlobalState_C2S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::GetGlobalState.C2S, global::GetGlobalState.C2S.Builder>(internal__static_GetGlobalState_C2S__Descriptor,
                new string[] { "UserID", });
        internal__static_GetGlobalState_S2C__Descriptor = Descriptor.MessageTypes[1];
        internal__static_GetGlobalState_S2C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::GetGlobalState.S2C, global::GetGlobalState.S2C.Builder>(internal__static_GetGlobalState_S2C__Descriptor,
                new string[] { "MarketHK", "MarketUS", "MarketSH", "MarketSZ", "MarketHKFuture", "QotLogined", "TrdLogined", "ServerVer", "ServerBuildNo", "Time", "LocalTime", });
        internal__static_GetGlobalState_Request__Descriptor = Descriptor.MessageTypes[2];
        internal__static_GetGlobalState_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::GetGlobalState.Request, global::GetGlobalState.Request.Builder>(internal__static_GetGlobalState_Request__Descriptor,
                new string[] { "C2S", });
        internal__static_GetGlobalState_Response__Descriptor = Descriptor.MessageTypes[3];
        internal__static_GetGlobalState_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::GetGlobalState.Response, global::GetGlobalState.Response.Builder>(internal__static_GetGlobalState_Response__Descriptor,
                new string[] { "RetType", "RetMsg", "ErrCode", "S2C", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Common.Common.RegisterAllExtensions(registry);
        global::Qot_Common.QotCommon.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Common.Common.Descriptor, 
          global::Qot_Common.QotCommon.Descriptor, 
          }, assigner);
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2S : pb::GeneratedMessage<C2S, C2S.Builder> {
    private C2S() { }
    private static readonly C2S defaultInstance = new C2S().MakeReadOnly();
    private static readonly string[] _c2SFieldNames = new string[] { "userID" };
    private static readonly uint[] _c2SFieldTags = new uint[] { 8 };
    public static C2S DefaultInstance {
      get { return defaultInstance; }
    }

    public override C2S DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override C2S ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::GetGlobalState.GetGlobalState.internal__static_GetGlobalState_C2S__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<C2S, C2S.Builder> InternalFieldAccessors {
      get { return global::GetGlobalState.GetGlobalState.internal__static_GetGlobalState_C2S__FieldAccessorTable; }
    }

    public const int UserIDFieldNumber = 1;
    private bool hasUserID;
    private ulong userID_;
    public bool HasUserID {
      get { return hasUserID; }
    }
    public ulong UserID {
      get { return userID_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasUserID) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2SFieldNames;
      if (hasUserID) {
        output.WriteUInt64(1, field_names[0], UserID);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasUserID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, UserID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2S MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2S prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private C2S result;

      private C2S PrepareBuilder() {
        if (resultIsReadOnly) {
          C2S original = result;
          result = new C2S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override C2S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::GetGlobalState.C2S.Descriptor; }
      }

      public override C2S DefaultInstanceForType {
        get { return global::GetGlobalState.C2S.DefaultInstance; }
      }

      public override C2S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2S) {
          return MergeFrom((C2S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(C2S other) {
        if (other == global::GetGlobalState.C2S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2SFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2SFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserID = input.ReadUInt64(ref result.userID_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasUserID {
        get { return result.hasUserID; }
      }
      public ulong UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      public Builder SetUserID(ulong value) {
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = 0UL;
        return this;
      }
    }
    static C2S() {
      object.ReferenceEquals(global::GetGlobalState.GetGlobalState.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2C : pb::GeneratedMessage<S2C, S2C.Builder> {
    private S2C() { }
    private static readonly S2C defaultInstance = new S2C().MakeReadOnly();
    private static readonly string[] _s2CFieldNames = new string[] { "localTime", "marketHK", "marketHKFuture", "marketSH", "marketSZ", "marketUS", "qotLogined", "serverBuildNo", "serverVer", "time", "trdLogined" };
    private static readonly uint[] _s2CFieldTags = new uint[] { 89, 8, 40, 24, 32, 16, 48, 72, 64, 80, 56 };
    public static S2C DefaultInstance {
      get { return defaultInstance; }
    }

    public override S2C DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override S2C ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::GetGlobalState.GetGlobalState.internal__static_GetGlobalState_S2C__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<S2C, S2C.Builder> InternalFieldAccessors {
      get { return global::GetGlobalState.GetGlobalState.internal__static_GetGlobalState_S2C__FieldAccessorTable; }
    }

    public const int MarketHKFieldNumber = 1;
    private bool hasMarketHK;
    private int marketHK_;
    public bool HasMarketHK {
      get { return hasMarketHK; }
    }
    public int MarketHK {
      get { return marketHK_; }
    }

    public const int MarketUSFieldNumber = 2;
    private bool hasMarketUS;
    private int marketUS_;
    public bool HasMarketUS {
      get { return hasMarketUS; }
    }
    public int MarketUS {
      get { return marketUS_; }
    }

    public const int MarketSHFieldNumber = 3;
    private bool hasMarketSH;
    private int marketSH_;
    public bool HasMarketSH {
      get { return hasMarketSH; }
    }
    public int MarketSH {
      get { return marketSH_; }
    }

    public const int MarketSZFieldNumber = 4;
    private bool hasMarketSZ;
    private int marketSZ_;
    public bool HasMarketSZ {
      get { return hasMarketSZ; }
    }
    public int MarketSZ {
      get { return marketSZ_; }
    }

    public const int MarketHKFutureFieldNumber = 5;
    private bool hasMarketHKFuture;
    private int marketHKFuture_;
    public bool HasMarketHKFuture {
      get { return hasMarketHKFuture; }
    }
    public int MarketHKFuture {
      get { return marketHKFuture_; }
    }

    public const int QotLoginedFieldNumber = 6;
    private bool hasQotLogined;
    private bool qotLogined_;
    public bool HasQotLogined {
      get { return hasQotLogined; }
    }
    public bool QotLogined {
      get { return qotLogined_; }
    }

    public const int TrdLoginedFieldNumber = 7;
    private bool hasTrdLogined;
    private bool trdLogined_;
    public bool HasTrdLogined {
      get { return hasTrdLogined; }
    }
    public bool TrdLogined {
      get { return trdLogined_; }
    }

    public const int ServerVerFieldNumber = 8;
    private bool hasServerVer;
    private int serverVer_;
    public bool HasServerVer {
      get { return hasServerVer; }
    }
    public int ServerVer {
      get { return serverVer_; }
    }

    public const int ServerBuildNoFieldNumber = 9;
    private bool hasServerBuildNo;
    private int serverBuildNo_;
    public bool HasServerBuildNo {
      get { return hasServerBuildNo; }
    }
    public int ServerBuildNo {
      get { return serverBuildNo_; }
    }

    public const int TimeFieldNumber = 10;
    private bool hasTime;
    private long time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public long Time {
      get { return time_; }
    }

    public const int LocalTimeFieldNumber = 11;
    private bool hasLocalTime;
    private double localTime_;
    public bool HasLocalTime {
      get { return hasLocalTime; }
    }
    public double LocalTime {
      get { return localTime_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasMarketHK) return false;
        if (!hasMarketUS) return false;
        if (!hasMarketSH) return false;
        if (!hasMarketSZ) return false;
        if (!hasMarketHKFuture) return false;
        if (!hasQotLogined) return false;
        if (!hasTrdLogined) return false;
        if (!hasServerVer) return false;
        if (!hasServerBuildNo) return false;
        if (!hasTime) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _s2CFieldNames;
      if (hasMarketHK) {
        output.WriteInt32(1, field_names[1], MarketHK);
      }
      if (hasMarketUS) {
        output.WriteInt32(2, field_names[5], MarketUS);
      }
      if (hasMarketSH) {
        output.WriteInt32(3, field_names[3], MarketSH);
      }
      if (hasMarketSZ) {
        output.WriteInt32(4, field_names[4], MarketSZ);
      }
      if (hasMarketHKFuture) {
        output.WriteInt32(5, field_names[2], MarketHKFuture);
      }
      if (hasQotLogined) {
        output.WriteBool(6, field_names[6], QotLogined);
      }
      if (hasTrdLogined) {
        output.WriteBool(7, field_names[10], TrdLogined);
      }
      if (hasServerVer) {
        output.WriteInt32(8, field_names[8], ServerVer);
      }
      if (hasServerBuildNo) {
        output.WriteInt32(9, field_names[7], ServerBuildNo);
      }
      if (hasTime) {
        output.WriteInt64(10, field_names[9], Time);
      }
      if (hasLocalTime) {
        output.WriteDouble(11, field_names[0], LocalTime);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasMarketHK) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, MarketHK);
      }
      if (hasMarketUS) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, MarketUS);
      }
      if (hasMarketSH) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, MarketSH);
      }
      if (hasMarketSZ) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, MarketSZ);
      }
      if (hasMarketHKFuture) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, MarketHKFuture);
      }
      if (hasQotLogined) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, QotLogined);
      }
      if (hasTrdLogined) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, TrdLogined);
      }
      if (hasServerVer) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, ServerVer);
      }
      if (hasServerBuildNo) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, ServerBuildNo);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(10, Time);
      }
      if (hasLocalTime) {
        size += pb::CodedOutputStream.ComputeDoubleSize(11, LocalTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static S2C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static S2C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static S2C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static S2C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static S2C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static S2C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static S2C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private S2C MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(S2C prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<S2C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(S2C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private S2C result;

      private S2C PrepareBuilder() {
        if (resultIsReadOnly) {
          S2C original = result;
          result = new S2C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override S2C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::GetGlobalState.S2C.Descriptor; }
      }

      public override S2C DefaultInstanceForType {
        get { return global::GetGlobalState.S2C.DefaultInstance; }
      }

      public override S2C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is S2C) {
          return MergeFrom((S2C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(S2C other) {
        if (other == global::GetGlobalState.S2C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMarketHK) {
          MarketHK = other.MarketHK;
        }
        if (other.HasMarketUS) {
          MarketUS = other.MarketUS;
        }
        if (other.HasMarketSH) {
          MarketSH = other.MarketSH;
        }
        if (other.HasMarketSZ) {
          MarketSZ = other.MarketSZ;
        }
        if (other.HasMarketHKFuture) {
          MarketHKFuture = other.MarketHKFuture;
        }
        if (other.HasQotLogined) {
          QotLogined = other.QotLogined;
        }
        if (other.HasTrdLogined) {
          TrdLogined = other.TrdLogined;
        }
        if (other.HasServerVer) {
          ServerVer = other.ServerVer;
        }
        if (other.HasServerBuildNo) {
          ServerBuildNo = other.ServerBuildNo;
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasLocalTime) {
          LocalTime = other.LocalTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_s2CFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _s2CFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMarketHK = input.ReadInt32(ref result.marketHK_);
              break;
            }
            case 16: {
              result.hasMarketUS = input.ReadInt32(ref result.marketUS_);
              break;
            }
            case 24: {
              result.hasMarketSH = input.ReadInt32(ref result.marketSH_);
              break;
            }
            case 32: {
              result.hasMarketSZ = input.ReadInt32(ref result.marketSZ_);
              break;
            }
            case 40: {
              result.hasMarketHKFuture = input.ReadInt32(ref result.marketHKFuture_);
              break;
            }
            case 48: {
              result.hasQotLogined = input.ReadBool(ref result.qotLogined_);
              break;
            }
            case 56: {
              result.hasTrdLogined = input.ReadBool(ref result.trdLogined_);
              break;
            }
            case 64: {
              result.hasServerVer = input.ReadInt32(ref result.serverVer_);
              break;
            }
            case 72: {
              result.hasServerBuildNo = input.ReadInt32(ref result.serverBuildNo_);
              break;
            }
            case 80: {
              result.hasTime = input.ReadInt64(ref result.time_);
              break;
            }
            case 89: {
              result.hasLocalTime = input.ReadDouble(ref result.localTime_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasMarketHK {
        get { return result.hasMarketHK; }
      }
      public int MarketHK {
        get { return result.MarketHK; }
        set { SetMarketHK(value); }
      }
      public Builder SetMarketHK(int value) {
        PrepareBuilder();
        result.hasMarketHK = true;
        result.marketHK_ = value;
        return this;
      }
      public Builder ClearMarketHK() {
        PrepareBuilder();
        result.hasMarketHK = false;
        result.marketHK_ = 0;
        return this;
      }

      public bool HasMarketUS {
        get { return result.hasMarketUS; }
      }
      public int MarketUS {
        get { return result.MarketUS; }
        set { SetMarketUS(value); }
      }
      public Builder SetMarketUS(int value) {
        PrepareBuilder();
        result.hasMarketUS = true;
        result.marketUS_ = value;
        return this;
      }
      public Builder ClearMarketUS() {
        PrepareBuilder();
        result.hasMarketUS = false;
        result.marketUS_ = 0;
        return this;
      }

      public bool HasMarketSH {
        get { return result.hasMarketSH; }
      }
      public int MarketSH {
        get { return result.MarketSH; }
        set { SetMarketSH(value); }
      }
      public Builder SetMarketSH(int value) {
        PrepareBuilder();
        result.hasMarketSH = true;
        result.marketSH_ = value;
        return this;
      }
      public Builder ClearMarketSH() {
        PrepareBuilder();
        result.hasMarketSH = false;
        result.marketSH_ = 0;
        return this;
      }

      public bool HasMarketSZ {
        get { return result.hasMarketSZ; }
      }
      public int MarketSZ {
        get { return result.MarketSZ; }
        set { SetMarketSZ(value); }
      }
      public Builder SetMarketSZ(int value) {
        PrepareBuilder();
        result.hasMarketSZ = true;
        result.marketSZ_ = value;
        return this;
      }
      public Builder ClearMarketSZ() {
        PrepareBuilder();
        result.hasMarketSZ = false;
        result.marketSZ_ = 0;
        return this;
      }

      public bool HasMarketHKFuture {
        get { return result.hasMarketHKFuture; }
      }
      public int MarketHKFuture {
        get { return result.MarketHKFuture; }
        set { SetMarketHKFuture(value); }
      }
      public Builder SetMarketHKFuture(int value) {
        PrepareBuilder();
        result.hasMarketHKFuture = true;
        result.marketHKFuture_ = value;
        return this;
      }
      public Builder ClearMarketHKFuture() {
        PrepareBuilder();
        result.hasMarketHKFuture = false;
        result.marketHKFuture_ = 0;
        return this;
      }

      public bool HasQotLogined {
        get { return result.hasQotLogined; }
      }
      public bool QotLogined {
        get { return result.QotLogined; }
        set { SetQotLogined(value); }
      }
      public Builder SetQotLogined(bool value) {
        PrepareBuilder();
        result.hasQotLogined = true;
        result.qotLogined_ = value;
        return this;
      }
      public Builder ClearQotLogined() {
        PrepareBuilder();
        result.hasQotLogined = false;
        result.qotLogined_ = false;
        return this;
      }

      public bool HasTrdLogined {
        get { return result.hasTrdLogined; }
      }
      public bool TrdLogined {
        get { return result.TrdLogined; }
        set { SetTrdLogined(value); }
      }
      public Builder SetTrdLogined(bool value) {
        PrepareBuilder();
        result.hasTrdLogined = true;
        result.trdLogined_ = value;
        return this;
      }
      public Builder ClearTrdLogined() {
        PrepareBuilder();
        result.hasTrdLogined = false;
        result.trdLogined_ = false;
        return this;
      }

      public bool HasServerVer {
        get { return result.hasServerVer; }
      }
      public int ServerVer {
        get { return result.ServerVer; }
        set { SetServerVer(value); }
      }
      public Builder SetServerVer(int value) {
        PrepareBuilder();
        result.hasServerVer = true;
        result.serverVer_ = value;
        return this;
      }
      public Builder ClearServerVer() {
        PrepareBuilder();
        result.hasServerVer = false;
        result.serverVer_ = 0;
        return this;
      }

      public bool HasServerBuildNo {
        get { return result.hasServerBuildNo; }
      }
      public int ServerBuildNo {
        get { return result.ServerBuildNo; }
        set { SetServerBuildNo(value); }
      }
      public Builder SetServerBuildNo(int value) {
        PrepareBuilder();
        result.hasServerBuildNo = true;
        result.serverBuildNo_ = value;
        return this;
      }
      public Builder ClearServerBuildNo() {
        PrepareBuilder();
        result.hasServerBuildNo = false;
        result.serverBuildNo_ = 0;
        return this;
      }

      public bool HasTime {
        get { return result.hasTime; }
      }
      public long Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(long value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0L;
        return this;
      }

      public bool HasLocalTime {
        get { return result.hasLocalTime; }
      }
      public double LocalTime {
        get { return result.LocalTime; }
        set { SetLocalTime(value); }
      }
      public Builder SetLocalTime(double value) {
        PrepareBuilder();
        result.hasLocalTime = true;
        result.localTime_ = value;
        return this;
      }
      public Builder ClearLocalTime() {
        PrepareBuilder();
        result.hasLocalTime = false;
        result.localTime_ = 0D;
        return this;
      }
    }
    static S2C() {
      object.ReferenceEquals(global::GetGlobalState.GetGlobalState.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
    private Request() { }
    private static readonly Request defaultInstance = new Request().MakeReadOnly();
    private static readonly string[] _requestFieldNames = new string[] { "c2s" };
    private static readonly uint[] _requestFieldTags = new uint[] { 10 };
    public static Request DefaultInstance {
      get { return defaultInstance; }
    }

    public override Request DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Request ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::GetGlobalState.GetGlobalState.internal__static_GetGlobalState_Request__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
      get { return global::GetGlobalState.GetGlobalState.internal__static_GetGlobalState_Request__FieldAccessorTable; }
    }

    public const int C2SFieldNumber = 1;
    private bool hasC2S;
    private global::GetGlobalState.C2S c2S_;
    public bool HasC2S {
      get { return hasC2S; }
    }
    public global::GetGlobalState.C2S C2S {
      get { return c2S_ ?? global::GetGlobalState.C2S.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (!hasC2S) return false;
        if (!C2S.IsInitialized) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _requestFieldNames;
      if (hasC2S) {
        output.WriteMessage(1, field_names[0], C2S);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasC2S) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, C2S);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Request ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Request ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Request ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Request ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Request MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Request prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Request cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Request result;

      private Request PrepareBuilder() {
        if (resultIsReadOnly) {
          Request original = result;
          result = new Request();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Request MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::GetGlobalState.Request.Descriptor; }
      }

      public override Request DefaultInstanceForType {
        get { return global::GetGlobalState.Request.DefaultInstance; }
      }

      public override Request BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Request) {
          return MergeFrom((Request) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Request other) {
        if (other == global::GetGlobalState.Request.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasC2S) {
          MergeC2S(other.C2S);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::GetGlobalState.C2S.Builder subBuilder = global::GetGlobalState.C2S.CreateBuilder();
              if (result.hasC2S) {
                subBuilder.MergeFrom(C2S);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              C2S = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasC2S {
       get { return result.hasC2S; }
      }
      public global::GetGlobalState.C2S C2S {
        get { return result.C2S; }
        set { SetC2S(value); }
      }
      public Builder SetC2S(global::GetGlobalState.C2S value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasC2S = true;
        result.c2S_ = value;
        return this;
      }
      public Builder SetC2S(global::GetGlobalState.C2S.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasC2S = true;
        result.c2S_ = builderForValue.Build();
        return this;
      }
      public Builder MergeC2S(global::GetGlobalState.C2S value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasC2S &&
            result.c2S_ != global::GetGlobalState.C2S.DefaultInstance) {
            result.c2S_ = global::GetGlobalState.C2S.CreateBuilder(result.c2S_).MergeFrom(value).BuildPartial();
        } else {
          result.c2S_ = value;
        }
        result.hasC2S = true;
        return this;
      }
      public Builder ClearC2S() {
        PrepareBuilder();
        result.hasC2S = false;
        result.c2S_ = null;
        return this;
      }
    }
    static Request() {
      object.ReferenceEquals(global::GetGlobalState.GetGlobalState.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
    private Response() { }
    private static readonly Response defaultInstance = new Response().MakeReadOnly();
    private static readonly string[] _responseFieldNames = new string[] { "errCode", "retMsg", "retType", "s2c" };
    private static readonly uint[] _responseFieldTags = new uint[] { 24, 18, 8, 34 };
    public static Response DefaultInstance {
      get { return defaultInstance; }
    }

    public override Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Response ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::GetGlobalState.GetGlobalState.internal__static_GetGlobalState_Response__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
      get { return global::GetGlobalState.GetGlobalState.internal__static_GetGlobalState_Response__FieldAccessorTable; }
    }

    public const int RetTypeFieldNumber = 1;
    private bool hasRetType;
    private int retType_ = -400;
    public bool HasRetType {
      get { return hasRetType; }
    }
    public int RetType {
      get { return retType_; }
    }

    public const int RetMsgFieldNumber = 2;
    private bool hasRetMsg;
    private string retMsg_ = "";
    public bool HasRetMsg {
      get { return hasRetMsg; }
    }
    public string RetMsg {
      get { return retMsg_; }
    }

    public const int ErrCodeFieldNumber = 3;
    private bool hasErrCode;
    private int errCode_;
    public bool HasErrCode {
      get { return hasErrCode; }
    }
    public int ErrCode {
      get { return errCode_; }
    }

    public const int S2CFieldNumber = 4;
    private bool hasS2C;
    private global::GetGlobalState.S2C s2C_;
    public bool HasS2C {
      get { return hasS2C; }
    }
    public global::GetGlobalState.S2C S2C {
      get { return s2C_ ?? global::GetGlobalState.S2C.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (!hasRetType) return false;
        if (HasS2C) {
          if (!S2C.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _responseFieldNames;
      if (hasRetType) {
        output.WriteInt32(1, field_names[2], RetType);
      }
      if (hasRetMsg) {
        output.WriteString(2, field_names[1], RetMsg);
      }
      if (hasErrCode) {
        output.WriteInt32(3, field_names[0], ErrCode);
      }
      if (hasS2C) {
        output.WriteMessage(4, field_names[3], S2C);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasRetType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, RetType);
      }
      if (hasRetMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(2, RetMsg);
      }
      if (hasErrCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, ErrCode);
      }
      if (hasS2C) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, S2C);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Response MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Response prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Response result;

      private Response PrepareBuilder() {
        if (resultIsReadOnly) {
          Response original = result;
          result = new Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::GetGlobalState.Response.Descriptor; }
      }

      public override Response DefaultInstanceForType {
        get { return global::GetGlobalState.Response.DefaultInstance; }
      }

      public override Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Response) {
          return MergeFrom((Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Response other) {
        if (other == global::GetGlobalState.Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRetType) {
          RetType = other.RetType;
        }
        if (other.HasRetMsg) {
          RetMsg = other.RetMsg;
        }
        if (other.HasErrCode) {
          ErrCode = other.ErrCode;
        }
        if (other.HasS2C) {
          MergeS2C(other.S2C);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _responseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRetType = input.ReadInt32(ref result.retType_);
              break;
            }
            case 18: {
              result.hasRetMsg = input.ReadString(ref result.retMsg_);
              break;
            }
            case 24: {
              result.hasErrCode = input.ReadInt32(ref result.errCode_);
              break;
            }
            case 34: {
              global::GetGlobalState.S2C.Builder subBuilder = global::GetGlobalState.S2C.CreateBuilder();
              if (result.hasS2C) {
                subBuilder.MergeFrom(S2C);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              S2C = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasRetType {
        get { return result.hasRetType; }
      }
      public int RetType {
        get { return result.RetType; }
        set { SetRetType(value); }
      }
      public Builder SetRetType(int value) {
        PrepareBuilder();
        result.hasRetType = true;
        result.retType_ = value;
        return this;
      }
      public Builder ClearRetType() {
        PrepareBuilder();
        result.hasRetType = false;
        result.retType_ = -400;
        return this;
      }

      public bool HasRetMsg {
        get { return result.hasRetMsg; }
      }
      public string RetMsg {
        get { return result.RetMsg; }
        set { SetRetMsg(value); }
      }
      public Builder SetRetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRetMsg = true;
        result.retMsg_ = value;
        return this;
      }
      public Builder ClearRetMsg() {
        PrepareBuilder();
        result.hasRetMsg = false;
        result.retMsg_ = "";
        return this;
      }

      public bool HasErrCode {
        get { return result.hasErrCode; }
      }
      public int ErrCode {
        get { return result.ErrCode; }
        set { SetErrCode(value); }
      }
      public Builder SetErrCode(int value) {
        PrepareBuilder();
        result.hasErrCode = true;
        result.errCode_ = value;
        return this;
      }
      public Builder ClearErrCode() {
        PrepareBuilder();
        result.hasErrCode = false;
        result.errCode_ = 0;
        return this;
      }

      public bool HasS2C {
       get { return result.hasS2C; }
      }
      public global::GetGlobalState.S2C S2C {
        get { return result.S2C; }
        set { SetS2C(value); }
      }
      public Builder SetS2C(global::GetGlobalState.S2C value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasS2C = true;
        result.s2C_ = value;
        return this;
      }
      public Builder SetS2C(global::GetGlobalState.S2C.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasS2C = true;
        result.s2C_ = builderForValue.Build();
        return this;
      }
      public Builder MergeS2C(global::GetGlobalState.S2C value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasS2C &&
            result.s2C_ != global::GetGlobalState.S2C.DefaultInstance) {
            result.s2C_ = global::GetGlobalState.S2C.CreateBuilder(result.s2C_).MergeFrom(value).BuildPartial();
        } else {
          result.s2C_ = value;
        }
        result.hasS2C = true;
        return this;
      }
      public Builder ClearS2C() {
        PrepareBuilder();
        result.hasS2C = false;
        result.s2C_ = null;
        return this;
      }
    }
    static Response() {
      object.ReferenceEquals(global::GetGlobalState.GetGlobalState.Descriptor, null);
    }
  }

  #endregion

}

#endregion Designer generated code
